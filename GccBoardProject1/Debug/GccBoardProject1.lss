
GccBoardProject1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000239c  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000574  20070000  0008239c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          0000a25c  20070578  00082918  00020578  2**3
                  ALLOC
  3 .stack        00002004  2007a7d4  0008cb74  00020578  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00020574  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002059d  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001293e  00000000  00000000  000205f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002c9b  00000000  00000000  00032f34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000830  00000000  00000000  00035bcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000008c8  00000000  00000000  000363ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00017d87  00000000  00000000  00036cc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b3d5  00000000  00000000  0004ea4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0006aa10  00000000  00000000  00059e23  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001534  00000000  00000000  000c4834  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000054a0  00000000  00000000  000c5d68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	d8 c7 07 20 7d 1b 08 00 79 1b 08 00 79 1b 08 00     ... }...y...y...
   80010:	79 1b 08 00 79 1b 08 00 79 1b 08 00 00 00 00 00     y...y...y.......
	...
   8002c:	29 02 08 00 79 1b 08 00 00 00 00 00 a9 02 08 00     )...y...........
   8003c:	e5 02 08 00 79 1b 08 00 79 1b 08 00 79 1b 08 00     ....y...y...y...
   8004c:	79 1b 08 00 79 1b 08 00 79 1b 08 00 79 1b 08 00     y...y...y...y...
   8005c:	79 1b 08 00 79 1b 08 00 79 1b 08 00 00 00 00 00     y...y...y.......
   8006c:	21 1a 08 00 35 1a 08 00 49 1a 08 00 5d 1a 08 00     !...5...I...]...
	...
   80084:	79 1b 08 00 79 1b 08 00 79 1b 08 00 79 1b 08 00     y...y...y...y...
   80094:	79 1b 08 00 79 1b 08 00 79 1b 08 00 79 1b 08 00     y...y...y...y...
   800a4:	00 00 00 00 79 1b 08 00 79 1b 08 00 79 1b 08 00     ....y...y...y...
   800b4:	79 1b 08 00 79 1b 08 00 79 1b 08 00 79 1b 08 00     y...y...y...y...
   800c4:	79 1b 08 00 79 1b 08 00 79 1b 08 00 79 1b 08 00     y...y...y...y...
   800d4:	79 1b 08 00 79 1b 08 00 79 1b 08 00 79 1b 08 00     y...y...y...y...
   800e4:	79 1b 08 00 79 1b 08 00 79 1b 08 00 79 1b 08 00     y...y...y...y...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070578 	.word	0x20070578
   80110:	00000000 	.word	0x00000000
   80114:	0008239c 	.word	0x0008239c

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	0008239c 	.word	0x0008239c
   80154:	2007057c 	.word	0x2007057c
   80158:	0008239c 	.word	0x0008239c
   8015c:	00000000 	.word	0x00000000

00080160 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   80160:	f100 0308 	add.w	r3, r0, #8
   80164:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   80166:	f04f 32ff 	mov.w	r2, #4294967295
   8016a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   8016c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   8016e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   80170:	2300      	movs	r3, #0
   80172:	6003      	str	r3, [r0, #0]
   80174:	4770      	bx	lr

00080176 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   80176:	2300      	movs	r3, #0
   80178:	6103      	str	r3, [r0, #16]
   8017a:	4770      	bx	lr

0008017c <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   8017c:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   8017e:	685a      	ldr	r2, [r3, #4]
   80180:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   80182:	6842      	ldr	r2, [r0, #4]
   80184:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   80186:	685a      	ldr	r2, [r3, #4]
   80188:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   8018a:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   8018c:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   8018e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80190:	6803      	ldr	r3, [r0, #0]
   80192:	3301      	adds	r3, #1
   80194:	6003      	str	r3, [r0, #0]
   80196:	4770      	bx	lr

00080198 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   80198:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   8019a:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   8019c:	f1b4 3fff 	cmp.w	r4, #4294967295
   801a0:	d015      	beq.n	801ce <vListInsert+0x36>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   801a2:	f100 0308 	add.w	r3, r0, #8
   801a6:	68c2      	ldr	r2, [r0, #12]
   801a8:	6812      	ldr	r2, [r2, #0]
   801aa:	4294      	cmp	r4, r2
   801ac:	d304      	bcc.n	801b8 <vListInsert+0x20>
   801ae:	685b      	ldr	r3, [r3, #4]
   801b0:	685a      	ldr	r2, [r3, #4]
   801b2:	6812      	ldr	r2, [r2, #0]
   801b4:	4294      	cmp	r4, r2
   801b6:	d2fa      	bcs.n	801ae <vListInsert+0x16>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   801b8:	685a      	ldr	r2, [r3, #4]
   801ba:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   801bc:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
   801be:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   801c0:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   801c2:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   801c4:	6803      	ldr	r3, [r0, #0]
   801c6:	3301      	adds	r3, #1
   801c8:	6003      	str	r3, [r0, #0]
}
   801ca:	bc10      	pop	{r4}
   801cc:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
   801ce:	6903      	ldr	r3, [r0, #16]
   801d0:	e7f2      	b.n	801b8 <vListInsert+0x20>

000801d2 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   801d2:	6843      	ldr	r3, [r0, #4]
   801d4:	6882      	ldr	r2, [r0, #8]
   801d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   801d8:	6883      	ldr	r3, [r0, #8]
   801da:	6842      	ldr	r2, [r0, #4]
   801dc:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   801de:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   801e0:	685a      	ldr	r2, [r3, #4]
   801e2:	4290      	cmp	r0, r2
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   801e4:	bf04      	itt	eq
   801e6:	6882      	ldreq	r2, [r0, #8]
   801e8:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   801ea:	2200      	movs	r2, #0
   801ec:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   801ee:	681a      	ldr	r2, [r3, #0]
   801f0:	3a01      	subs	r2, #1
   801f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   801f4:	6818      	ldr	r0, [r3, #0]
}
   801f6:	4770      	bx	lr

000801f8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   801f8:	4803      	ldr	r0, [pc, #12]	; (80208 <prvPortStartFirstTask+0x10>)
   801fa:	6800      	ldr	r0, [r0, #0]
   801fc:	6800      	ldr	r0, [r0, #0]
   801fe:	f380 8808 	msr	MSP, r0
   80202:	b662      	cpsie	i
   80204:	df00      	svc	0
   80206:	bf00      	nop
   80208:	e000ed08 	.word	0xe000ed08

0008020c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   8020c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   80210:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   80214:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = 0;	/* LR */
   80218:	2300      	movs	r3, #0
   8021a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   8021e:	f840 2c20 	str.w	r2, [r0, #-32]
}
   80222:	3840      	subs	r0, #64	; 0x40
   80224:	4770      	bx	lr
	...

00080228 <SVC_Handler>:
	__asm volatile (
   80228:	4b06      	ldr	r3, [pc, #24]	; (80244 <pxCurrentTCBConst2>)
   8022a:	6819      	ldr	r1, [r3, #0]
   8022c:	6808      	ldr	r0, [r1, #0]
   8022e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80232:	f380 8809 	msr	PSP, r0
   80236:	f04f 0000 	mov.w	r0, #0
   8023a:	f380 8811 	msr	BASEPRI, r0
   8023e:	f04e 0e0d 	orr.w	lr, lr, #13
   80242:	4770      	bx	lr

00080244 <pxCurrentTCBConst2>:
   80244:	2007a5a0 	.word	0x2007a5a0

00080248 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80248:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8024c:	4b01      	ldr	r3, [pc, #4]	; (80254 <vPortYieldFromISR+0xc>)
   8024e:	601a      	str	r2, [r3, #0]
   80250:	4770      	bx	lr
   80252:	bf00      	nop
   80254:	e000ed04 	.word	0xe000ed04

00080258 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   80258:	f3ef 8011 	mrs	r0, BASEPRI
   8025c:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   80260:	f381 8811 	msr	BASEPRI, r1
   80264:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   80266:	2000      	movs	r0, #0

00080268 <vPortEnterCritical>:
{
   80268:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
   8026a:	4b03      	ldr	r3, [pc, #12]	; (80278 <vPortEnterCritical+0x10>)
   8026c:	4798      	blx	r3
	uxCriticalNesting++;
   8026e:	4a03      	ldr	r2, [pc, #12]	; (8027c <vPortEnterCritical+0x14>)
   80270:	6813      	ldr	r3, [r2, #0]
   80272:	3301      	adds	r3, #1
   80274:	6013      	str	r3, [r2, #0]
   80276:	bd08      	pop	{r3, pc}
   80278:	00080259 	.word	0x00080259
   8027c:	20070138 	.word	0x20070138

00080280 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   80280:	f380 8811 	msr	BASEPRI, r0
   80284:	4770      	bx	lr
	...

00080288 <vPortExitCritical>:
{
   80288:	b508      	push	{r3, lr}
	uxCriticalNesting--;
   8028a:	4a05      	ldr	r2, [pc, #20]	; (802a0 <vPortExitCritical+0x18>)
   8028c:	6813      	ldr	r3, [r2, #0]
   8028e:	3b01      	subs	r3, #1
   80290:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   80292:	b103      	cbz	r3, 80296 <vPortExitCritical+0xe>
   80294:	bd08      	pop	{r3, pc}
		portENABLE_INTERRUPTS();
   80296:	2000      	movs	r0, #0
   80298:	4b02      	ldr	r3, [pc, #8]	; (802a4 <vPortExitCritical+0x1c>)
   8029a:	4798      	blx	r3
}
   8029c:	e7fa      	b.n	80294 <vPortExitCritical+0xc>
   8029e:	bf00      	nop
   802a0:	20070138 	.word	0x20070138
   802a4:	00080281 	.word	0x00080281

000802a8 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   802a8:	f3ef 8009 	mrs	r0, PSP
   802ac:	4b0c      	ldr	r3, [pc, #48]	; (802e0 <pxCurrentTCBConst>)
   802ae:	681a      	ldr	r2, [r3, #0]
   802b0:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   802b4:	6010      	str	r0, [r2, #0]
   802b6:	e92d 4008 	stmdb	sp!, {r3, lr}
   802ba:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   802be:	f380 8811 	msr	BASEPRI, r0
   802c2:	f000 fe99 	bl	80ff8 <vTaskSwitchContext>
   802c6:	f04f 0000 	mov.w	r0, #0
   802ca:	f380 8811 	msr	BASEPRI, r0
   802ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   802d2:	6819      	ldr	r1, [r3, #0]
   802d4:	6808      	ldr	r0, [r1, #0]
   802d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   802da:	f380 8809 	msr	PSP, r0
   802de:	4770      	bx	lr

000802e0 <pxCurrentTCBConst>:
   802e0:	2007a5a0 	.word	0x2007a5a0

000802e4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   802e4:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   802e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   802ea:	4b05      	ldr	r3, [pc, #20]	; (80300 <SysTick_Handler+0x1c>)
   802ec:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   802ee:	4b05      	ldr	r3, [pc, #20]	; (80304 <SysTick_Handler+0x20>)
   802f0:	4798      	blx	r3
	{
		vTaskIncrementTick();
   802f2:	4b05      	ldr	r3, [pc, #20]	; (80308 <SysTick_Handler+0x24>)
   802f4:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   802f6:	2000      	movs	r0, #0
   802f8:	4b04      	ldr	r3, [pc, #16]	; (8030c <SysTick_Handler+0x28>)
   802fa:	4798      	blx	r3
   802fc:	bd08      	pop	{r3, pc}
   802fe:	bf00      	nop
   80300:	e000ed04 	.word	0xe000ed04
   80304:	00080259 	.word	0x00080259
   80308:	00080d49 	.word	0x00080d49
   8030c:	00080281 	.word	0x00080281

00080310 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
   80310:	4a03      	ldr	r2, [pc, #12]	; (80320 <vPortSetupTimerInterrupt+0x10>)
   80312:	4b04      	ldr	r3, [pc, #16]	; (80324 <vPortSetupTimerInterrupt+0x14>)
   80314:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
   80316:	2207      	movs	r2, #7
   80318:	3b04      	subs	r3, #4
   8031a:	601a      	str	r2, [r3, #0]
   8031c:	4770      	bx	lr
   8031e:	bf00      	nop
   80320:	0001481f 	.word	0x0001481f
   80324:	e000e014 	.word	0xe000e014

00080328 <xPortStartScheduler>:
{
   80328:	b510      	push	{r4, lr}
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   8032a:	4b09      	ldr	r3, [pc, #36]	; (80350 <xPortStartScheduler+0x28>)
   8032c:	681a      	ldr	r2, [r3, #0]
   8032e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   80332:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   80334:	681a      	ldr	r2, [r3, #0]
   80336:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   8033a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
   8033c:	4b05      	ldr	r3, [pc, #20]	; (80354 <xPortStartScheduler+0x2c>)
   8033e:	4798      	blx	r3
	uxCriticalNesting = 0;
   80340:	2400      	movs	r4, #0
   80342:	4b05      	ldr	r3, [pc, #20]	; (80358 <xPortStartScheduler+0x30>)
   80344:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
   80346:	4b05      	ldr	r3, [pc, #20]	; (8035c <xPortStartScheduler+0x34>)
   80348:	4798      	blx	r3
}
   8034a:	4620      	mov	r0, r4
   8034c:	bd10      	pop	{r4, pc}
   8034e:	bf00      	nop
   80350:	e000ed20 	.word	0xe000ed20
   80354:	00080311 	.word	0x00080311
   80358:	20070138 	.word	0x20070138
   8035c:	000801f9 	.word	0x000801f9

00080360 <prvInsertBlockIntoFreeList>:
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   80360:	b410      	push	{r4}
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   80362:	4a13      	ldr	r2, [pc, #76]	; (803b0 <prvInsertBlockIntoFreeList+0x50>)
   80364:	e000      	b.n	80368 <prvInsertBlockIntoFreeList+0x8>
   80366:	461a      	mov	r2, r3
   80368:	6813      	ldr	r3, [r2, #0]
   8036a:	4283      	cmp	r3, r0
   8036c:	d3fb      	bcc.n	80366 <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   8036e:	6851      	ldr	r1, [r2, #4]
   80370:	1854      	adds	r4, r2, r1
   80372:	42a0      	cmp	r0, r4
   80374:	d009      	beq.n	8038a <prvInsertBlockIntoFreeList+0x2a>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   80376:	6841      	ldr	r1, [r0, #4]
   80378:	1844      	adds	r4, r0, r1
   8037a:	42a3      	cmp	r3, r4
   8037c:	d00a      	beq.n	80394 <prvInsertBlockIntoFreeList+0x34>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   8037e:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   80380:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   80382:	bf18      	it	ne
   80384:	6010      	strne	r0, [r2, #0]
	}
}
   80386:	bc10      	pop	{r4}
   80388:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   8038a:	6840      	ldr	r0, [r0, #4]
   8038c:	4401      	add	r1, r0
   8038e:	6051      	str	r1, [r2, #4]
   80390:	4610      	mov	r0, r2
   80392:	e7f0      	b.n	80376 <prvInsertBlockIntoFreeList+0x16>
		if( pxIterator->pxNextFreeBlock != pxEnd )
   80394:	4c07      	ldr	r4, [pc, #28]	; (803b4 <prvInsertBlockIntoFreeList+0x54>)
   80396:	6824      	ldr	r4, [r4, #0]
   80398:	42a3      	cmp	r3, r4
   8039a:	d006      	beq.n	803aa <prvInsertBlockIntoFreeList+0x4a>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   8039c:	685b      	ldr	r3, [r3, #4]
   8039e:	4419      	add	r1, r3
   803a0:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   803a2:	6813      	ldr	r3, [r2, #0]
   803a4:	681b      	ldr	r3, [r3, #0]
   803a6:	6003      	str	r3, [r0, #0]
   803a8:	e7ea      	b.n	80380 <prvInsertBlockIntoFreeList+0x20>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   803aa:	6003      	str	r3, [r0, #0]
   803ac:	e7e8      	b.n	80380 <prvInsertBlockIntoFreeList+0x20>
   803ae:	bf00      	nop
   803b0:	2007a598 	.word	0x2007a598
   803b4:	20070594 	.word	0x20070594

000803b8 <pvPortMalloc>:
{
   803b8:	b538      	push	{r3, r4, r5, lr}
   803ba:	4604      	mov	r4, r0
	vTaskSuspendAll();
   803bc:	4b2a      	ldr	r3, [pc, #168]	; (80468 <pvPortMalloc+0xb0>)
   803be:	4798      	blx	r3
		if( pxEnd == NULL )
   803c0:	4b2a      	ldr	r3, [pc, #168]	; (8046c <pvPortMalloc+0xb4>)
   803c2:	681b      	ldr	r3, [r3, #0]
   803c4:	b18b      	cbz	r3, 803ea <pvPortMalloc+0x32>
		if( xWantedSize > 0 )
   803c6:	2c00      	cmp	r4, #0
   803c8:	d047      	beq.n	8045a <pvPortMalloc+0xa2>
			xWantedSize += heapSTRUCT_SIZE;
   803ca:	f104 0210 	add.w	r2, r4, #16
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   803ce:	f012 0f07 	tst.w	r2, #7
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   803d2:	bf1c      	itt	ne
   803d4:	f022 0207 	bicne.w	r2, r2, #7
   803d8:	3208      	addne	r2, #8
		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   803da:	1e51      	subs	r1, r2, #1
   803dc:	f649 73fe 	movw	r3, #40958	; 0x9ffe
   803e0:	4299      	cmp	r1, r3
   803e2:	d83c      	bhi.n	8045e <pvPortMalloc+0xa6>
			pxBlock = xStart.pxNextFreeBlock;
   803e4:	4922      	ldr	r1, [pc, #136]	; (80470 <pvPortMalloc+0xb8>)
   803e6:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   803e8:	e016      	b.n	80418 <pvPortMalloc+0x60>
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   803ea:	4a21      	ldr	r2, [pc, #132]	; (80470 <pvPortMalloc+0xb8>)
   803ec:	4b21      	ldr	r3, [pc, #132]	; (80474 <pvPortMalloc+0xbc>)
   803ee:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   803f0:	2100      	movs	r1, #0
   803f2:	6051      	str	r1, [r2, #4]
	pxEnd = ( void * ) pucHeapEnd;
   803f4:	f649 72f0 	movw	r2, #40944	; 0x9ff0
   803f8:	1898      	adds	r0, r3, r2
   803fa:	4d1c      	ldr	r5, [pc, #112]	; (8046c <pvPortMalloc+0xb4>)
   803fc:	6028      	str	r0, [r5, #0]
	pxEnd->xBlockSize = 0;
   803fe:	f649 75f4 	movw	r5, #40948	; 0x9ff4
   80402:	5159      	str	r1, [r3, r5]
	pxEnd->pxNextFreeBlock = NULL;
   80404:	5099      	str	r1, [r3, r2]
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   80406:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   80408:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   8040a:	4a1b      	ldr	r2, [pc, #108]	; (80478 <pvPortMalloc+0xc0>)
   8040c:	6813      	ldr	r3, [r2, #0]
   8040e:	3b10      	subs	r3, #16
   80410:	6013      	str	r3, [r2, #0]
   80412:	e7d8      	b.n	803c6 <pvPortMalloc+0xe>
   80414:	4621      	mov	r1, r4
				pxBlock = pxBlock->pxNextFreeBlock;
   80416:	461c      	mov	r4, r3
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   80418:	6863      	ldr	r3, [r4, #4]
   8041a:	429a      	cmp	r2, r3
   8041c:	d902      	bls.n	80424 <pvPortMalloc+0x6c>
   8041e:	6823      	ldr	r3, [r4, #0]
   80420:	2b00      	cmp	r3, #0
   80422:	d1f7      	bne.n	80414 <pvPortMalloc+0x5c>
			if( pxBlock != pxEnd )
   80424:	4b11      	ldr	r3, [pc, #68]	; (8046c <pvPortMalloc+0xb4>)
   80426:	681b      	ldr	r3, [r3, #0]
   80428:	429c      	cmp	r4, r3
   8042a:	d01a      	beq.n	80462 <pvPortMalloc+0xaa>
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   8042c:	680d      	ldr	r5, [r1, #0]
   8042e:	3510      	adds	r5, #16
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   80430:	6823      	ldr	r3, [r4, #0]
   80432:	600b      	str	r3, [r1, #0]
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   80434:	6863      	ldr	r3, [r4, #4]
   80436:	1a9b      	subs	r3, r3, r2
   80438:	2b20      	cmp	r3, #32
   8043a:	d808      	bhi.n	8044e <pvPortMalloc+0x96>
				xFreeBytesRemaining -= pxBlock->xBlockSize;
   8043c:	4a0e      	ldr	r2, [pc, #56]	; (80478 <pvPortMalloc+0xc0>)
   8043e:	6813      	ldr	r3, [r2, #0]
   80440:	6861      	ldr	r1, [r4, #4]
   80442:	1a5b      	subs	r3, r3, r1
   80444:	6013      	str	r3, [r2, #0]
	xTaskResumeAll();
   80446:	4b0d      	ldr	r3, [pc, #52]	; (8047c <pvPortMalloc+0xc4>)
   80448:	4798      	blx	r3
}
   8044a:	4628      	mov	r0, r5
   8044c:	bd38      	pop	{r3, r4, r5, pc}
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   8044e:	18a0      	adds	r0, r4, r2
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   80450:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
   80452:	6062      	str	r2, [r4, #4]
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   80454:	4b0a      	ldr	r3, [pc, #40]	; (80480 <pvPortMalloc+0xc8>)
   80456:	4798      	blx	r3
   80458:	e7f0      	b.n	8043c <pvPortMalloc+0x84>
void *pvReturn = NULL;
   8045a:	2500      	movs	r5, #0
   8045c:	e7f3      	b.n	80446 <pvPortMalloc+0x8e>
   8045e:	2500      	movs	r5, #0
   80460:	e7f1      	b.n	80446 <pvPortMalloc+0x8e>
   80462:	2500      	movs	r5, #0
   80464:	e7ef      	b.n	80446 <pvPortMalloc+0x8e>
   80466:	bf00      	nop
   80468:	00080d19 	.word	0x00080d19
   8046c:	20070594 	.word	0x20070594
   80470:	2007a598 	.word	0x2007a598
   80474:	20070598 	.word	0x20070598
   80478:	2007013c 	.word	0x2007013c
   8047c:	00080e71 	.word	0x00080e71
   80480:	00080361 	.word	0x00080361

00080484 <vPortFree>:
	if( pv != NULL )
   80484:	b180      	cbz	r0, 804a8 <vPortFree+0x24>
{
   80486:	b510      	push	{r4, lr}
   80488:	4604      	mov	r4, r0
		vTaskSuspendAll();
   8048a:	4b08      	ldr	r3, [pc, #32]	; (804ac <vPortFree+0x28>)
   8048c:	4798      	blx	r3
			xFreeBytesRemaining += pxLink->xBlockSize;
   8048e:	4a08      	ldr	r2, [pc, #32]	; (804b0 <vPortFree+0x2c>)
   80490:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   80494:	6811      	ldr	r1, [r2, #0]
   80496:	440b      	add	r3, r1
   80498:	6013      	str	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   8049a:	f1a4 0010 	sub.w	r0, r4, #16
   8049e:	4b05      	ldr	r3, [pc, #20]	; (804b4 <vPortFree+0x30>)
   804a0:	4798      	blx	r3
		xTaskResumeAll();
   804a2:	4b05      	ldr	r3, [pc, #20]	; (804b8 <vPortFree+0x34>)
   804a4:	4798      	blx	r3
   804a6:	bd10      	pop	{r4, pc}
   804a8:	4770      	bx	lr
   804aa:	bf00      	nop
   804ac:	00080d19 	.word	0x00080d19
   804b0:	2007013c 	.word	0x2007013c
   804b4:	00080361 	.word	0x00080361
   804b8:	00080e71 	.word	0x00080e71

000804bc <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   804bc:	b510      	push	{r4, lr}
   804be:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   804c0:	6c03      	ldr	r3, [r0, #64]	; 0x40
   804c2:	b95b      	cbnz	r3, 804dc <prvCopyDataToQueue+0x20>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   804c4:	6803      	ldr	r3, [r0, #0]
   804c6:	b11b      	cbz	r3, 804d0 <prvCopyDataToQueue+0x14>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
		}
	}

	++( pxQueue->uxMessagesWaiting );
   804c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   804ca:	3301      	adds	r3, #1
   804cc:	63a3      	str	r3, [r4, #56]	; 0x38
   804ce:	bd10      	pop	{r4, pc}
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   804d0:	6840      	ldr	r0, [r0, #4]
   804d2:	4b12      	ldr	r3, [pc, #72]	; (8051c <prvCopyDataToQueue+0x60>)
   804d4:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   804d6:	2300      	movs	r3, #0
   804d8:	6063      	str	r3, [r4, #4]
   804da:	e7f5      	b.n	804c8 <prvCopyDataToQueue+0xc>
	else if( xPosition == queueSEND_TO_BACK )
   804dc:	b96a      	cbnz	r2, 804fa <prvCopyDataToQueue+0x3e>
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   804de:	461a      	mov	r2, r3
   804e0:	6880      	ldr	r0, [r0, #8]
   804e2:	4b0f      	ldr	r3, [pc, #60]	; (80520 <prvCopyDataToQueue+0x64>)
   804e4:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   804e6:	68a3      	ldr	r3, [r4, #8]
   804e8:	6c22      	ldr	r2, [r4, #64]	; 0x40
   804ea:	4413      	add	r3, r2
   804ec:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   804ee:	6862      	ldr	r2, [r4, #4]
   804f0:	4293      	cmp	r3, r2
   804f2:	d3e9      	bcc.n	804c8 <prvCopyDataToQueue+0xc>
			pxQueue->pcWriteTo = pxQueue->pcHead;
   804f4:	6823      	ldr	r3, [r4, #0]
   804f6:	60a3      	str	r3, [r4, #8]
   804f8:	e7e6      	b.n	804c8 <prvCopyDataToQueue+0xc>
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   804fa:	461a      	mov	r2, r3
   804fc:	68c0      	ldr	r0, [r0, #12]
   804fe:	4b08      	ldr	r3, [pc, #32]	; (80520 <prvCopyDataToQueue+0x64>)
   80500:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   80502:	6c22      	ldr	r2, [r4, #64]	; 0x40
   80504:	4252      	negs	r2, r2
   80506:	68e3      	ldr	r3, [r4, #12]
   80508:	4413      	add	r3, r2
   8050a:	60e3      	str	r3, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   8050c:	6821      	ldr	r1, [r4, #0]
   8050e:	428b      	cmp	r3, r1
   80510:	d2da      	bcs.n	804c8 <prvCopyDataToQueue+0xc>
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   80512:	6863      	ldr	r3, [r4, #4]
   80514:	441a      	add	r2, r3
   80516:	60e2      	str	r2, [r4, #12]
   80518:	e7d6      	b.n	804c8 <prvCopyDataToQueue+0xc>
   8051a:	bf00      	nop
   8051c:	00081325 	.word	0x00081325
   80520:	0008201d 	.word	0x0008201d

00080524 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   80524:	b538      	push	{r3, r4, r5, lr}
   80526:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   80528:	6800      	ldr	r0, [r0, #0]
   8052a:	b158      	cbz	r0, 80544 <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   8052c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   8052e:	68dc      	ldr	r4, [r3, #12]
   80530:	4414      	add	r4, r2
   80532:	60dc      	str	r4, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   80534:	685d      	ldr	r5, [r3, #4]
   80536:	42ac      	cmp	r4, r5
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   80538:	bf28      	it	cs
   8053a:	60d8      	strcs	r0, [r3, #12]
   8053c:	4608      	mov	r0, r1
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   8053e:	68d9      	ldr	r1, [r3, #12]
   80540:	4b01      	ldr	r3, [pc, #4]	; (80548 <prvCopyDataFromQueue+0x24>)
   80542:	4798      	blx	r3
   80544:	bd38      	pop	{r3, r4, r5, pc}
   80546:	bf00      	nop
   80548:	0008201d 	.word	0x0008201d

0008054c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   8054c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8054e:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   80550:	4b1f      	ldr	r3, [pc, #124]	; (805d0 <prvUnlockQueue+0x84>)
   80552:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   80554:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80556:	2b00      	cmp	r3, #0
   80558:	dd14      	ble.n	80584 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   8055a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8055c:	b193      	cbz	r3, 80584 <prvUnlockQueue+0x38>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   8055e:	f104 0624 	add.w	r6, r4, #36	; 0x24
   80562:	4d1c      	ldr	r5, [pc, #112]	; (805d4 <prvUnlockQueue+0x88>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   80564:	4f1c      	ldr	r7, [pc, #112]	; (805d8 <prvUnlockQueue+0x8c>)
   80566:	e007      	b.n	80578 <prvUnlockQueue+0x2c>
				}

				--( pxQueue->xTxLock );
   80568:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   8056a:	3b01      	subs	r3, #1
   8056c:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   8056e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80570:	2b00      	cmp	r3, #0
   80572:	dd07      	ble.n	80584 <prvUnlockQueue+0x38>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80574:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80576:	b12b      	cbz	r3, 80584 <prvUnlockQueue+0x38>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80578:	4630      	mov	r0, r6
   8057a:	47a8      	blx	r5
   8057c:	2800      	cmp	r0, #0
   8057e:	d0f3      	beq.n	80568 <prvUnlockQueue+0x1c>
					vTaskMissedYield();
   80580:	47b8      	blx	r7
   80582:	e7f1      	b.n	80568 <prvUnlockQueue+0x1c>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   80584:	f04f 33ff 	mov.w	r3, #4294967295
   80588:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   8058a:	4b14      	ldr	r3, [pc, #80]	; (805dc <prvUnlockQueue+0x90>)
   8058c:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   8058e:	4b10      	ldr	r3, [pc, #64]	; (805d0 <prvUnlockQueue+0x84>)
   80590:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   80592:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80594:	2b00      	cmp	r3, #0
   80596:	dd14      	ble.n	805c2 <prvUnlockQueue+0x76>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80598:	6923      	ldr	r3, [r4, #16]
   8059a:	b193      	cbz	r3, 805c2 <prvUnlockQueue+0x76>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   8059c:	f104 0610 	add.w	r6, r4, #16
   805a0:	4d0c      	ldr	r5, [pc, #48]	; (805d4 <prvUnlockQueue+0x88>)
				{
					vTaskMissedYield();
   805a2:	4f0d      	ldr	r7, [pc, #52]	; (805d8 <prvUnlockQueue+0x8c>)
   805a4:	e007      	b.n	805b6 <prvUnlockQueue+0x6a>
				}

				--( pxQueue->xRxLock );
   805a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
   805a8:	3b01      	subs	r3, #1
   805aa:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   805ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
   805ae:	2b00      	cmp	r3, #0
   805b0:	dd07      	ble.n	805c2 <prvUnlockQueue+0x76>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   805b2:	6923      	ldr	r3, [r4, #16]
   805b4:	b12b      	cbz	r3, 805c2 <prvUnlockQueue+0x76>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   805b6:	4630      	mov	r0, r6
   805b8:	47a8      	blx	r5
   805ba:	2800      	cmp	r0, #0
   805bc:	d0f3      	beq.n	805a6 <prvUnlockQueue+0x5a>
					vTaskMissedYield();
   805be:	47b8      	blx	r7
   805c0:	e7f1      	b.n	805a6 <prvUnlockQueue+0x5a>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   805c2:	f04f 33ff 	mov.w	r3, #4294967295
   805c6:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   805c8:	4b04      	ldr	r3, [pc, #16]	; (805dc <prvUnlockQueue+0x90>)
   805ca:	4798      	blx	r3
   805cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   805ce:	bf00      	nop
   805d0:	00080269 	.word	0x00080269
   805d4:	0008113d 	.word	0x0008113d
   805d8:	0008126d 	.word	0x0008126d
   805dc:	00080289 	.word	0x00080289

000805e0 <xQueueGenericReset>:
{
   805e0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
   805e2:	b308      	cbz	r0, 80628 <xQueueGenericReset+0x48>
   805e4:	460d      	mov	r5, r1
   805e6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
   805e8:	4b17      	ldr	r3, [pc, #92]	; (80648 <xQueueGenericReset+0x68>)
   805ea:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   805ec:	6822      	ldr	r2, [r4, #0]
   805ee:	6c21      	ldr	r1, [r4, #64]	; 0x40
   805f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   805f2:	fb03 f301 	mul.w	r3, r3, r1
   805f6:	18d0      	adds	r0, r2, r3
   805f8:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   805fa:	2000      	movs	r0, #0
   805fc:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   805fe:	60a2      	str	r2, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   80600:	1a5b      	subs	r3, r3, r1
   80602:	4413      	add	r3, r2
   80604:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   80606:	f04f 33ff 	mov.w	r3, #4294967295
   8060a:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   8060c:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
   8060e:	b995      	cbnz	r5, 80636 <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80610:	6923      	ldr	r3, [r4, #16]
   80612:	b12b      	cbz	r3, 80620 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   80614:	f104 0010 	add.w	r0, r4, #16
   80618:	4b0c      	ldr	r3, [pc, #48]	; (8064c <xQueueGenericReset+0x6c>)
   8061a:	4798      	blx	r3
   8061c:	2801      	cmp	r0, #1
   8061e:	d007      	beq.n	80630 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
   80620:	4b0b      	ldr	r3, [pc, #44]	; (80650 <xQueueGenericReset+0x70>)
   80622:	4798      	blx	r3
}
   80624:	2001      	movs	r0, #1
   80626:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxQueue );
   80628:	4b0a      	ldr	r3, [pc, #40]	; (80654 <xQueueGenericReset+0x74>)
   8062a:	4798      	blx	r3
   8062c:	bf00      	nop
   8062e:	e7fd      	b.n	8062c <xQueueGenericReset+0x4c>
					portYIELD_WITHIN_API();
   80630:	4b09      	ldr	r3, [pc, #36]	; (80658 <xQueueGenericReset+0x78>)
   80632:	4798      	blx	r3
   80634:	e7f4      	b.n	80620 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   80636:	f104 0010 	add.w	r0, r4, #16
   8063a:	4d08      	ldr	r5, [pc, #32]	; (8065c <xQueueGenericReset+0x7c>)
   8063c:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   8063e:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80642:	47a8      	blx	r5
   80644:	e7ec      	b.n	80620 <xQueueGenericReset+0x40>
   80646:	bf00      	nop
   80648:	00080269 	.word	0x00080269
   8064c:	0008113d 	.word	0x0008113d
   80650:	00080289 	.word	0x00080289
   80654:	00080259 	.word	0x00080259
   80658:	00080249 	.word	0x00080249
   8065c:	00080161 	.word	0x00080161

00080660 <xQueueGenericCreate>:
{
   80660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   80662:	b1d8      	cbz	r0, 8069c <xQueueGenericCreate+0x3c>
   80664:	460d      	mov	r5, r1
   80666:	4617      	mov	r7, r2
   80668:	4606      	mov	r6, r0
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   8066a:	2050      	movs	r0, #80	; 0x50
   8066c:	4b0d      	ldr	r3, [pc, #52]	; (806a4 <xQueueGenericCreate+0x44>)
   8066e:	4798      	blx	r3
		if( pxNewQueue != NULL )
   80670:	4604      	mov	r4, r0
   80672:	b198      	cbz	r0, 8069c <xQueueGenericCreate+0x3c>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   80674:	fb05 f006 	mul.w	r0, r5, r6
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   80678:	3001      	adds	r0, #1
   8067a:	4b0a      	ldr	r3, [pc, #40]	; (806a4 <xQueueGenericCreate+0x44>)
   8067c:	4798      	blx	r3
   8067e:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   80680:	b148      	cbz	r0, 80696 <xQueueGenericCreate+0x36>
				pxNewQueue->uxLength = uxQueueLength;
   80682:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   80684:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   80686:	2101      	movs	r1, #1
   80688:	4620      	mov	r0, r4
   8068a:	4b07      	ldr	r3, [pc, #28]	; (806a8 <xQueueGenericCreate+0x48>)
   8068c:	4798      	blx	r3
					pxNewQueue->ucQueueType = ucQueueType;
   8068e:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
}
   80692:	4620      	mov	r0, r4
   80694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vPortFree( pxNewQueue );
   80696:	4620      	mov	r0, r4
   80698:	4b04      	ldr	r3, [pc, #16]	; (806ac <xQueueGenericCreate+0x4c>)
   8069a:	4798      	blx	r3
	configASSERT( xReturn );
   8069c:	4b04      	ldr	r3, [pc, #16]	; (806b0 <xQueueGenericCreate+0x50>)
   8069e:	4798      	blx	r3
   806a0:	bf00      	nop
   806a2:	e7fd      	b.n	806a0 <xQueueGenericCreate+0x40>
   806a4:	000803b9 	.word	0x000803b9
   806a8:	000805e1 	.word	0x000805e1
   806ac:	00080485 	.word	0x00080485
   806b0:	00080259 	.word	0x00080259

000806b4 <xQueueGenericSend>:
{
   806b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   806b8:	b085      	sub	sp, #20
   806ba:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
   806bc:	b148      	cbz	r0, 806d2 <xQueueGenericSend+0x1e>
   806be:	4688      	mov	r8, r1
   806c0:	4699      	mov	r9, r3
   806c2:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   806c4:	b149      	cbz	r1, 806da <xQueueGenericSend+0x26>
   806c6:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
   806c8:	4e38      	ldr	r6, [pc, #224]	; (807ac <xQueueGenericSend+0xf8>)
					vTaskSetTimeOutState( &xTimeOut );
   806ca:	f8df a10c 	ldr.w	sl, [pc, #268]	; 807d8 <xQueueGenericSend+0x124>
		taskEXIT_CRITICAL();
   806ce:	4d38      	ldr	r5, [pc, #224]	; (807b0 <xQueueGenericSend+0xfc>)
   806d0:	e02e      	b.n	80730 <xQueueGenericSend+0x7c>
	configASSERT( pxQueue );
   806d2:	4b38      	ldr	r3, [pc, #224]	; (807b4 <xQueueGenericSend+0x100>)
   806d4:	4798      	blx	r3
   806d6:	bf00      	nop
   806d8:	e7fd      	b.n	806d6 <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   806da:	6c03      	ldr	r3, [r0, #64]	; 0x40
   806dc:	b11b      	cbz	r3, 806e6 <xQueueGenericSend+0x32>
   806de:	4b35      	ldr	r3, [pc, #212]	; (807b4 <xQueueGenericSend+0x100>)
   806e0:	4798      	blx	r3
   806e2:	bf00      	nop
   806e4:	e7fd      	b.n	806e2 <xQueueGenericSend+0x2e>
   806e6:	2700      	movs	r7, #0
   806e8:	e7ee      	b.n	806c8 <xQueueGenericSend+0x14>
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   806ea:	464a      	mov	r2, r9
   806ec:	4641      	mov	r1, r8
   806ee:	4620      	mov	r0, r4
   806f0:	4b31      	ldr	r3, [pc, #196]	; (807b8 <xQueueGenericSend+0x104>)
   806f2:	4798      	blx	r3
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   806f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   806f6:	b92b      	cbnz	r3, 80704 <xQueueGenericSend+0x50>
				taskEXIT_CRITICAL();
   806f8:	4b2d      	ldr	r3, [pc, #180]	; (807b0 <xQueueGenericSend+0xfc>)
   806fa:	4798      	blx	r3
				return pdPASS;
   806fc:	2001      	movs	r0, #1
}
   806fe:	b005      	add	sp, #20
   80700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   80704:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80708:	4b2c      	ldr	r3, [pc, #176]	; (807bc <xQueueGenericSend+0x108>)
   8070a:	4798      	blx	r3
   8070c:	2801      	cmp	r0, #1
   8070e:	d1f3      	bne.n	806f8 <xQueueGenericSend+0x44>
						portYIELD_WITHIN_API();
   80710:	4b2b      	ldr	r3, [pc, #172]	; (807c0 <xQueueGenericSend+0x10c>)
   80712:	4798      	blx	r3
   80714:	e7f0      	b.n	806f8 <xQueueGenericSend+0x44>
					taskEXIT_CRITICAL();
   80716:	4b26      	ldr	r3, [pc, #152]	; (807b0 <xQueueGenericSend+0xfc>)
   80718:	4798      	blx	r3
					return errQUEUE_FULL;
   8071a:	2000      	movs	r0, #0
   8071c:	e7ef      	b.n	806fe <xQueueGenericSend+0x4a>
					vTaskSetTimeOutState( &xTimeOut );
   8071e:	a802      	add	r0, sp, #8
   80720:	47d0      	blx	sl
   80722:	e00f      	b.n	80744 <xQueueGenericSend+0x90>
				prvUnlockQueue( pxQueue );
   80724:	4620      	mov	r0, r4
   80726:	4b27      	ldr	r3, [pc, #156]	; (807c4 <xQueueGenericSend+0x110>)
   80728:	4798      	blx	r3
				( void ) xTaskResumeAll();
   8072a:	4b27      	ldr	r3, [pc, #156]	; (807c8 <xQueueGenericSend+0x114>)
   8072c:	4798      	blx	r3
   8072e:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
   80730:	47b0      	blx	r6
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   80732:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80734:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80736:	429a      	cmp	r2, r3
   80738:	d3d7      	bcc.n	806ea <xQueueGenericSend+0x36>
				if( xTicksToWait == ( portTickType ) 0 )
   8073a:	9b01      	ldr	r3, [sp, #4]
   8073c:	2b00      	cmp	r3, #0
   8073e:	d0ea      	beq.n	80716 <xQueueGenericSend+0x62>
				else if( xEntryTimeSet == pdFALSE )
   80740:	2f00      	cmp	r7, #0
   80742:	d0ec      	beq.n	8071e <xQueueGenericSend+0x6a>
		taskEXIT_CRITICAL();
   80744:	47a8      	blx	r5
		vTaskSuspendAll();
   80746:	4b21      	ldr	r3, [pc, #132]	; (807cc <xQueueGenericSend+0x118>)
   80748:	4798      	blx	r3
		prvLockQueue( pxQueue );
   8074a:	47b0      	blx	r6
   8074c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   8074e:	f1b3 3fff 	cmp.w	r3, #4294967295
   80752:	bf04      	itt	eq
   80754:	2300      	moveq	r3, #0
   80756:	6463      	streq	r3, [r4, #68]	; 0x44
   80758:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   8075a:	f1b3 3fff 	cmp.w	r3, #4294967295
   8075e:	bf04      	itt	eq
   80760:	2300      	moveq	r3, #0
   80762:	64a3      	streq	r3, [r4, #72]	; 0x48
   80764:	47a8      	blx	r5
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   80766:	a901      	add	r1, sp, #4
   80768:	a802      	add	r0, sp, #8
   8076a:	4b19      	ldr	r3, [pc, #100]	; (807d0 <xQueueGenericSend+0x11c>)
   8076c:	4798      	blx	r3
   8076e:	b9a8      	cbnz	r0, 8079c <xQueueGenericSend+0xe8>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   80770:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   80772:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
   80776:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   80778:	47a8      	blx	r5
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   8077a:	45bb      	cmp	fp, r7
   8077c:	d1d2      	bne.n	80724 <xQueueGenericSend+0x70>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   8077e:	9901      	ldr	r1, [sp, #4]
   80780:	f104 0010 	add.w	r0, r4, #16
   80784:	4b13      	ldr	r3, [pc, #76]	; (807d4 <xQueueGenericSend+0x120>)
   80786:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   80788:	4620      	mov	r0, r4
   8078a:	4b0e      	ldr	r3, [pc, #56]	; (807c4 <xQueueGenericSend+0x110>)
   8078c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   8078e:	4b0e      	ldr	r3, [pc, #56]	; (807c8 <xQueueGenericSend+0x114>)
   80790:	4798      	blx	r3
   80792:	2800      	cmp	r0, #0
   80794:	d1cb      	bne.n	8072e <xQueueGenericSend+0x7a>
					portYIELD_WITHIN_API();
   80796:	4b0a      	ldr	r3, [pc, #40]	; (807c0 <xQueueGenericSend+0x10c>)
   80798:	4798      	blx	r3
   8079a:	e7c8      	b.n	8072e <xQueueGenericSend+0x7a>
			prvUnlockQueue( pxQueue );
   8079c:	4620      	mov	r0, r4
   8079e:	4b09      	ldr	r3, [pc, #36]	; (807c4 <xQueueGenericSend+0x110>)
   807a0:	4798      	blx	r3
			( void ) xTaskResumeAll();
   807a2:	4b09      	ldr	r3, [pc, #36]	; (807c8 <xQueueGenericSend+0x114>)
   807a4:	4798      	blx	r3
			return errQUEUE_FULL;
   807a6:	2000      	movs	r0, #0
   807a8:	e7a9      	b.n	806fe <xQueueGenericSend+0x4a>
   807aa:	bf00      	nop
   807ac:	00080269 	.word	0x00080269
   807b0:	00080289 	.word	0x00080289
   807b4:	00080259 	.word	0x00080259
   807b8:	000804bd 	.word	0x000804bd
   807bc:	0008113d 	.word	0x0008113d
   807c0:	00080249 	.word	0x00080249
   807c4:	0008054d 	.word	0x0008054d
   807c8:	00080e71 	.word	0x00080e71
   807cc:	00080d19 	.word	0x00080d19
   807d0:	000811e9 	.word	0x000811e9
   807d4:	00081099 	.word	0x00081099
   807d8:	000811c1 	.word	0x000811c1

000807dc <xQueueGenericSendFromISR>:
{
   807dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( pxQueue );
   807e0:	b190      	cbz	r0, 80808 <xQueueGenericSendFromISR+0x2c>
   807e2:	460e      	mov	r6, r1
   807e4:	4615      	mov	r5, r2
   807e6:	4698      	mov	r8, r3
   807e8:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   807ea:	b189      	cbz	r1, 80810 <xQueueGenericSendFromISR+0x34>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   807ec:	4b1b      	ldr	r3, [pc, #108]	; (8085c <xQueueGenericSendFromISR+0x80>)
   807ee:	4798      	blx	r3
   807f0:	4607      	mov	r7, r0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   807f2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   807f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   807f6:	429a      	cmp	r2, r3
   807f8:	d311      	bcc.n	8081e <xQueueGenericSendFromISR+0x42>
			xReturn = errQUEUE_FULL;
   807fa:	2400      	movs	r4, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   807fc:	4638      	mov	r0, r7
   807fe:	4b18      	ldr	r3, [pc, #96]	; (80860 <xQueueGenericSendFromISR+0x84>)
   80800:	4798      	blx	r3
}
   80802:	4620      	mov	r0, r4
   80804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( pxQueue );
   80808:	4b14      	ldr	r3, [pc, #80]	; (8085c <xQueueGenericSendFromISR+0x80>)
   8080a:	4798      	blx	r3
   8080c:	bf00      	nop
   8080e:	e7fd      	b.n	8080c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80810:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80812:	2b00      	cmp	r3, #0
   80814:	d0ea      	beq.n	807ec <xQueueGenericSendFromISR+0x10>
   80816:	4b11      	ldr	r3, [pc, #68]	; (8085c <xQueueGenericSendFromISR+0x80>)
   80818:	4798      	blx	r3
   8081a:	bf00      	nop
   8081c:	e7fd      	b.n	8081a <xQueueGenericSendFromISR+0x3e>
			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   8081e:	4642      	mov	r2, r8
   80820:	4631      	mov	r1, r6
   80822:	4620      	mov	r0, r4
   80824:	4b0f      	ldr	r3, [pc, #60]	; (80864 <xQueueGenericSendFromISR+0x88>)
   80826:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
   80828:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   8082a:	f1b3 3fff 	cmp.w	r3, #4294967295
   8082e:	d10a      	bne.n	80846 <xQueueGenericSendFromISR+0x6a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80830:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80832:	b16b      	cbz	r3, 80850 <xQueueGenericSendFromISR+0x74>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80834:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80838:	4b0b      	ldr	r3, [pc, #44]	; (80868 <xQueueGenericSendFromISR+0x8c>)
   8083a:	4798      	blx	r3
   8083c:	b150      	cbz	r0, 80854 <xQueueGenericSendFromISR+0x78>
						if( pxHigherPriorityTaskWoken != NULL )
   8083e:	b15d      	cbz	r5, 80858 <xQueueGenericSendFromISR+0x7c>
							*pxHigherPriorityTaskWoken = pdTRUE;
   80840:	2401      	movs	r4, #1
   80842:	602c      	str	r4, [r5, #0]
   80844:	e7da      	b.n	807fc <xQueueGenericSendFromISR+0x20>
				++( pxQueue->xTxLock );
   80846:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80848:	3301      	adds	r3, #1
   8084a:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
   8084c:	2401      	movs	r4, #1
   8084e:	e7d5      	b.n	807fc <xQueueGenericSendFromISR+0x20>
   80850:	2401      	movs	r4, #1
   80852:	e7d3      	b.n	807fc <xQueueGenericSendFromISR+0x20>
   80854:	2401      	movs	r4, #1
   80856:	e7d1      	b.n	807fc <xQueueGenericSendFromISR+0x20>
   80858:	2401      	movs	r4, #1
   8085a:	e7cf      	b.n	807fc <xQueueGenericSendFromISR+0x20>
   8085c:	00080259 	.word	0x00080259
   80860:	00080281 	.word	0x00080281
   80864:	000804bd 	.word	0x000804bd
   80868:	0008113d 	.word	0x0008113d

0008086c <xQueueGenericReceive>:
{
   8086c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80870:	b084      	sub	sp, #16
   80872:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
   80874:	b148      	cbz	r0, 8088a <xQueueGenericReceive+0x1e>
   80876:	4688      	mov	r8, r1
   80878:	4699      	mov	r9, r3
   8087a:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   8087c:	b149      	cbz	r1, 80892 <xQueueGenericReceive+0x26>
   8087e:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
   80880:	4e46      	ldr	r6, [pc, #280]	; (8099c <xQueueGenericReceive+0x130>)
					vTaskSetTimeOutState( &xTimeOut );
   80882:	f8df a14c 	ldr.w	sl, [pc, #332]	; 809d0 <xQueueGenericReceive+0x164>
		taskEXIT_CRITICAL();
   80886:	4d46      	ldr	r5, [pc, #280]	; (809a0 <xQueueGenericReceive+0x134>)
   80888:	e04b      	b.n	80922 <xQueueGenericReceive+0xb6>
	configASSERT( pxQueue );
   8088a:	4b46      	ldr	r3, [pc, #280]	; (809a4 <xQueueGenericReceive+0x138>)
   8088c:	4798      	blx	r3
   8088e:	bf00      	nop
   80890:	e7fd      	b.n	8088e <xQueueGenericReceive+0x22>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80892:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80894:	b11b      	cbz	r3, 8089e <xQueueGenericReceive+0x32>
   80896:	4b43      	ldr	r3, [pc, #268]	; (809a4 <xQueueGenericReceive+0x138>)
   80898:	4798      	blx	r3
   8089a:	bf00      	nop
   8089c:	e7fd      	b.n	8089a <xQueueGenericReceive+0x2e>
   8089e:	2700      	movs	r7, #0
   808a0:	e7ee      	b.n	80880 <xQueueGenericReceive+0x14>
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   808a2:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   808a4:	4641      	mov	r1, r8
   808a6:	4620      	mov	r0, r4
   808a8:	4b3f      	ldr	r3, [pc, #252]	; (809a8 <xQueueGenericReceive+0x13c>)
   808aa:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
   808ac:	f1b9 0f00 	cmp.w	r9, #0
   808b0:	d117      	bne.n	808e2 <xQueueGenericReceive+0x76>
					--( pxQueue->uxMessagesWaiting );
   808b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   808b4:	3b01      	subs	r3, #1
   808b6:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   808b8:	6823      	ldr	r3, [r4, #0]
   808ba:	b913      	cbnz	r3, 808c2 <xQueueGenericReceive+0x56>
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   808bc:	4b3b      	ldr	r3, [pc, #236]	; (809ac <xQueueGenericReceive+0x140>)
   808be:	4798      	blx	r3
   808c0:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   808c2:	6923      	ldr	r3, [r4, #16]
   808c4:	b13b      	cbz	r3, 808d6 <xQueueGenericReceive+0x6a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   808c6:	f104 0010 	add.w	r0, r4, #16
   808ca:	4b39      	ldr	r3, [pc, #228]	; (809b0 <xQueueGenericReceive+0x144>)
   808cc:	4798      	blx	r3
   808ce:	2801      	cmp	r0, #1
   808d0:	d101      	bne.n	808d6 <xQueueGenericReceive+0x6a>
							portYIELD_WITHIN_API();
   808d2:	4b38      	ldr	r3, [pc, #224]	; (809b4 <xQueueGenericReceive+0x148>)
   808d4:	4798      	blx	r3
				taskEXIT_CRITICAL();
   808d6:	4b32      	ldr	r3, [pc, #200]	; (809a0 <xQueueGenericReceive+0x134>)
   808d8:	4798      	blx	r3
				return pdPASS;
   808da:	2001      	movs	r0, #1
}
   808dc:	b004      	add	sp, #16
   808de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   808e2:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   808e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   808e6:	2b00      	cmp	r3, #0
   808e8:	d0f5      	beq.n	808d6 <xQueueGenericReceive+0x6a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   808ea:	f104 0024 	add.w	r0, r4, #36	; 0x24
   808ee:	4b30      	ldr	r3, [pc, #192]	; (809b0 <xQueueGenericReceive+0x144>)
   808f0:	4798      	blx	r3
   808f2:	2800      	cmp	r0, #0
   808f4:	d0ef      	beq.n	808d6 <xQueueGenericReceive+0x6a>
							portYIELD_WITHIN_API();
   808f6:	4b2f      	ldr	r3, [pc, #188]	; (809b4 <xQueueGenericReceive+0x148>)
   808f8:	4798      	blx	r3
   808fa:	e7ec      	b.n	808d6 <xQueueGenericReceive+0x6a>
					taskEXIT_CRITICAL();
   808fc:	4b28      	ldr	r3, [pc, #160]	; (809a0 <xQueueGenericReceive+0x134>)
   808fe:	4798      	blx	r3
					return errQUEUE_EMPTY;
   80900:	2000      	movs	r0, #0
   80902:	e7eb      	b.n	808dc <xQueueGenericReceive+0x70>
					vTaskSetTimeOutState( &xTimeOut );
   80904:	a802      	add	r0, sp, #8
   80906:	47d0      	blx	sl
   80908:	e014      	b.n	80934 <xQueueGenericReceive+0xc8>
						portENTER_CRITICAL();
   8090a:	47b0      	blx	r6
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   8090c:	6860      	ldr	r0, [r4, #4]
   8090e:	4b2a      	ldr	r3, [pc, #168]	; (809b8 <xQueueGenericReceive+0x14c>)
   80910:	4798      	blx	r3
						portEXIT_CRITICAL();
   80912:	47a8      	blx	r5
   80914:	e02c      	b.n	80970 <xQueueGenericReceive+0x104>
				prvUnlockQueue( pxQueue );
   80916:	4620      	mov	r0, r4
   80918:	4b28      	ldr	r3, [pc, #160]	; (809bc <xQueueGenericReceive+0x150>)
   8091a:	4798      	blx	r3
				( void ) xTaskResumeAll();
   8091c:	4b28      	ldr	r3, [pc, #160]	; (809c0 <xQueueGenericReceive+0x154>)
   8091e:	4798      	blx	r3
   80920:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
   80922:	47b0      	blx	r6
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   80924:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80926:	2b00      	cmp	r3, #0
   80928:	d1bb      	bne.n	808a2 <xQueueGenericReceive+0x36>
				if( xTicksToWait == ( portTickType ) 0 )
   8092a:	9b01      	ldr	r3, [sp, #4]
   8092c:	2b00      	cmp	r3, #0
   8092e:	d0e5      	beq.n	808fc <xQueueGenericReceive+0x90>
				else if( xEntryTimeSet == pdFALSE )
   80930:	2f00      	cmp	r7, #0
   80932:	d0e7      	beq.n	80904 <xQueueGenericReceive+0x98>
		taskEXIT_CRITICAL();
   80934:	47a8      	blx	r5
		vTaskSuspendAll();
   80936:	4b23      	ldr	r3, [pc, #140]	; (809c4 <xQueueGenericReceive+0x158>)
   80938:	4798      	blx	r3
		prvLockQueue( pxQueue );
   8093a:	47b0      	blx	r6
   8093c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   8093e:	f1b3 3fff 	cmp.w	r3, #4294967295
   80942:	bf04      	itt	eq
   80944:	2300      	moveq	r3, #0
   80946:	6463      	streq	r3, [r4, #68]	; 0x44
   80948:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   8094a:	f1b3 3fff 	cmp.w	r3, #4294967295
   8094e:	bf04      	itt	eq
   80950:	2300      	moveq	r3, #0
   80952:	64a3      	streq	r3, [r4, #72]	; 0x48
   80954:	47a8      	blx	r5
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   80956:	a901      	add	r1, sp, #4
   80958:	a802      	add	r0, sp, #8
   8095a:	4b1b      	ldr	r3, [pc, #108]	; (809c8 <xQueueGenericReceive+0x15c>)
   8095c:	4798      	blx	r3
   8095e:	b9b0      	cbnz	r0, 8098e <xQueueGenericReceive+0x122>
	taskENTER_CRITICAL();
   80960:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   80962:	6ba7      	ldr	r7, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   80964:	47a8      	blx	r5
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   80966:	2f00      	cmp	r7, #0
   80968:	d1d5      	bne.n	80916 <xQueueGenericReceive+0xaa>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   8096a:	6823      	ldr	r3, [r4, #0]
   8096c:	2b00      	cmp	r3, #0
   8096e:	d0cc      	beq.n	8090a <xQueueGenericReceive+0x9e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   80970:	9901      	ldr	r1, [sp, #4]
   80972:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80976:	4b15      	ldr	r3, [pc, #84]	; (809cc <xQueueGenericReceive+0x160>)
   80978:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   8097a:	4620      	mov	r0, r4
   8097c:	4b0f      	ldr	r3, [pc, #60]	; (809bc <xQueueGenericReceive+0x150>)
   8097e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   80980:	4b0f      	ldr	r3, [pc, #60]	; (809c0 <xQueueGenericReceive+0x154>)
   80982:	4798      	blx	r3
   80984:	2800      	cmp	r0, #0
   80986:	d1cb      	bne.n	80920 <xQueueGenericReceive+0xb4>
					portYIELD_WITHIN_API();
   80988:	4b0a      	ldr	r3, [pc, #40]	; (809b4 <xQueueGenericReceive+0x148>)
   8098a:	4798      	blx	r3
   8098c:	e7c8      	b.n	80920 <xQueueGenericReceive+0xb4>
			prvUnlockQueue( pxQueue );
   8098e:	4620      	mov	r0, r4
   80990:	4b0a      	ldr	r3, [pc, #40]	; (809bc <xQueueGenericReceive+0x150>)
   80992:	4798      	blx	r3
			( void ) xTaskResumeAll();
   80994:	4b0a      	ldr	r3, [pc, #40]	; (809c0 <xQueueGenericReceive+0x154>)
   80996:	4798      	blx	r3
			return errQUEUE_EMPTY;
   80998:	2000      	movs	r0, #0
   8099a:	e79f      	b.n	808dc <xQueueGenericReceive+0x70>
   8099c:	00080269 	.word	0x00080269
   809a0:	00080289 	.word	0x00080289
   809a4:	00080259 	.word	0x00080259
   809a8:	00080525 	.word	0x00080525
   809ac:	00081279 	.word	0x00081279
   809b0:	0008113d 	.word	0x0008113d
   809b4:	00080249 	.word	0x00080249
   809b8:	000812a5 	.word	0x000812a5
   809bc:	0008054d 	.word	0x0008054d
   809c0:	00080e71 	.word	0x00080e71
   809c4:	00080d19 	.word	0x00080d19
   809c8:	000811e9 	.word	0x000811e9
   809cc:	00081099 	.word	0x00081099
   809d0:	000811c1 	.word	0x000811c1

000809d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if configQUEUE_REGISTRY_SIZE > 0

	void vQueueAddToRegistry( xQueueHandle xQueue, signed char *pcQueueName )
	{
   809d4:	b410      	push	{r4}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( unsigned portBASE_TYPE ) 0U; ux < ( unsigned portBASE_TYPE ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
   809d6:	4b0a      	ldr	r3, [pc, #40]	; (80a00 <vQueueAddToRegistry+0x2c>)
   809d8:	681b      	ldr	r3, [r3, #0]
   809da:	b14b      	cbz	r3, 809f0 <vQueueAddToRegistry+0x1c>
   809dc:	2301      	movs	r3, #1
   809de:	4c08      	ldr	r4, [pc, #32]	; (80a00 <vQueueAddToRegistry+0x2c>)
   809e0:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
   809e4:	b12a      	cbz	r2, 809f2 <vQueueAddToRegistry+0x1e>
		for( ux = ( unsigned portBASE_TYPE ) 0U; ux < ( unsigned portBASE_TYPE ) configQUEUE_REGISTRY_SIZE; ux++ )
   809e6:	3301      	adds	r3, #1
   809e8:	2b08      	cmp	r3, #8
   809ea:	d1f9      	bne.n	809e0 <vQueueAddToRegistry+0xc>
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
				xQueueRegistry[ ux ].xHandle = xQueue;
				break;
			}
		}
	}
   809ec:	bc10      	pop	{r4}
   809ee:	4770      	bx	lr
		for( ux = ( unsigned portBASE_TYPE ) 0U; ux < ( unsigned portBASE_TYPE ) configQUEUE_REGISTRY_SIZE; ux++ )
   809f0:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
   809f2:	4a03      	ldr	r2, [pc, #12]	; (80a00 <vQueueAddToRegistry+0x2c>)
   809f4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
   809f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   809fc:	6058      	str	r0, [r3, #4]
				break;
   809fe:	e7f5      	b.n	809ec <vQueueAddToRegistry+0x18>
   80a00:	2007a748 	.word	0x2007a748

00080a04 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
   80a04:	b538      	push	{r3, r4, r5, lr}
   80a06:	4604      	mov	r4, r0
   80a08:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   80a0a:	4b0e      	ldr	r3, [pc, #56]	; (80a44 <vQueueWaitForMessageRestricted+0x40>)
   80a0c:	4798      	blx	r3
   80a0e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80a10:	f1b3 3fff 	cmp.w	r3, #4294967295
   80a14:	bf04      	itt	eq
   80a16:	2300      	moveq	r3, #0
   80a18:	6463      	streq	r3, [r4, #68]	; 0x44
   80a1a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
   80a20:	bf04      	itt	eq
   80a22:	2300      	moveq	r3, #0
   80a24:	64a3      	streq	r3, [r4, #72]	; 0x48
   80a26:	4b08      	ldr	r3, [pc, #32]	; (80a48 <vQueueWaitForMessageRestricted+0x44>)
   80a28:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
   80a2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80a2c:	b11b      	cbz	r3, 80a36 <vQueueWaitForMessageRestricted+0x32>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
		}
		prvUnlockQueue( pxQueue );
   80a2e:	4620      	mov	r0, r4
   80a30:	4b06      	ldr	r3, [pc, #24]	; (80a4c <vQueueWaitForMessageRestricted+0x48>)
   80a32:	4798      	blx	r3
   80a34:	bd38      	pop	{r3, r4, r5, pc}
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   80a36:	4629      	mov	r1, r5
   80a38:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80a3c:	4b04      	ldr	r3, [pc, #16]	; (80a50 <vQueueWaitForMessageRestricted+0x4c>)
   80a3e:	4798      	blx	r3
   80a40:	e7f5      	b.n	80a2e <vQueueWaitForMessageRestricted+0x2a>
   80a42:	bf00      	nop
   80a44:	00080269 	.word	0x00080269
   80a48:	00080289 	.word	0x00080289
   80a4c:	0008054d 	.word	0x0008054d
   80a50:	000810f9 	.word	0x000810f9

00080a54 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   80a54:	b510      	push	{r4, lr}
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   80a56:	4b0f      	ldr	r3, [pc, #60]	; (80a94 <prvAddCurrentTaskToDelayedList+0x40>)
   80a58:	681b      	ldr	r3, [r3, #0]
   80a5a:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
   80a5c:	4b0e      	ldr	r3, [pc, #56]	; (80a98 <prvAddCurrentTaskToDelayedList+0x44>)
   80a5e:	681b      	ldr	r3, [r3, #0]
   80a60:	4298      	cmp	r0, r3
   80a62:	d30e      	bcc.n	80a82 <prvAddCurrentTaskToDelayedList+0x2e>
   80a64:	4604      	mov	r4, r0
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   80a66:	4b0d      	ldr	r3, [pc, #52]	; (80a9c <prvAddCurrentTaskToDelayedList+0x48>)
   80a68:	6818      	ldr	r0, [r3, #0]
   80a6a:	4b0a      	ldr	r3, [pc, #40]	; (80a94 <prvAddCurrentTaskToDelayedList+0x40>)
   80a6c:	6819      	ldr	r1, [r3, #0]
   80a6e:	3104      	adds	r1, #4
   80a70:	4b0b      	ldr	r3, [pc, #44]	; (80aa0 <prvAddCurrentTaskToDelayedList+0x4c>)
   80a72:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   80a74:	4b0b      	ldr	r3, [pc, #44]	; (80aa4 <prvAddCurrentTaskToDelayedList+0x50>)
   80a76:	681b      	ldr	r3, [r3, #0]
   80a78:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
   80a7a:	bf3c      	itt	cc
   80a7c:	4b09      	ldrcc	r3, [pc, #36]	; (80aa4 <prvAddCurrentTaskToDelayedList+0x50>)
   80a7e:	601c      	strcc	r4, [r3, #0]
   80a80:	bd10      	pop	{r4, pc}
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   80a82:	4b09      	ldr	r3, [pc, #36]	; (80aa8 <prvAddCurrentTaskToDelayedList+0x54>)
   80a84:	6818      	ldr	r0, [r3, #0]
   80a86:	4b03      	ldr	r3, [pc, #12]	; (80a94 <prvAddCurrentTaskToDelayedList+0x40>)
   80a88:	6819      	ldr	r1, [r3, #0]
   80a8a:	3104      	adds	r1, #4
   80a8c:	4b04      	ldr	r3, [pc, #16]	; (80aa0 <prvAddCurrentTaskToDelayedList+0x4c>)
   80a8e:	4798      	blx	r3
   80a90:	bd10      	pop	{r4, pc}
   80a92:	bf00      	nop
   80a94:	2007a5a0 	.word	0x2007a5a0
   80a98:	2007a69c 	.word	0x2007a69c
   80a9c:	2007a5a4 	.word	0x2007a5a4
   80aa0:	00080199 	.word	0x00080199
   80aa4:	20070140 	.word	0x20070140
   80aa8:	2007a5a8 	.word	0x2007a5a8

00080aac <xTaskGenericCreate>:
{
   80aac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80ab0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   80ab2:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   80ab6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	configASSERT( pxTaskCode );
   80ab8:	b148      	cbz	r0, 80ace <xTaskGenericCreate+0x22>
   80aba:	4688      	mov	r8, r1
   80abc:	4615      	mov	r5, r2
   80abe:	469b      	mov	fp, r3
   80ac0:	4682      	mov	sl, r0
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   80ac2:	2f04      	cmp	r7, #4
   80ac4:	d907      	bls.n	80ad6 <xTaskGenericCreate+0x2a>
   80ac6:	4b60      	ldr	r3, [pc, #384]	; (80c48 <xTaskGenericCreate+0x19c>)
   80ac8:	4798      	blx	r3
   80aca:	bf00      	nop
   80acc:	e7fd      	b.n	80aca <xTaskGenericCreate+0x1e>
	configASSERT( pxTaskCode );
   80ace:	4b5e      	ldr	r3, [pc, #376]	; (80c48 <xTaskGenericCreate+0x19c>)
   80ad0:	4798      	blx	r3
   80ad2:	bf00      	nop
   80ad4:	e7fd      	b.n	80ad2 <xTaskGenericCreate+0x26>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   80ad6:	204c      	movs	r0, #76	; 0x4c
   80ad8:	4b5c      	ldr	r3, [pc, #368]	; (80c4c <xTaskGenericCreate+0x1a0>)
   80ada:	4798      	blx	r3

	if( pxNewTCB != NULL )
   80adc:	4604      	mov	r4, r0
   80ade:	2800      	cmp	r0, #0
   80ae0:	d054      	beq.n	80b8c <xTaskGenericCreate+0xe0>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   80ae2:	2e00      	cmp	r6, #0
   80ae4:	d048      	beq.n	80b78 <xTaskGenericCreate+0xcc>
   80ae6:	6306      	str	r6, [r0, #48]	; 0x30
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   80ae8:	00aa      	lsls	r2, r5, #2
   80aea:	21a5      	movs	r1, #165	; 0xa5
   80aec:	4630      	mov	r0, r6
   80aee:	4b58      	ldr	r3, [pc, #352]	; (80c50 <xTaskGenericCreate+0x1a4>)
   80af0:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   80af2:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   80af6:	3d01      	subs	r5, #1
   80af8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   80afa:	eb03 0385 	add.w	r3, r3, r5, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   80afe:	f023 0507 	bic.w	r5, r3, #7
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   80b02:	220a      	movs	r2, #10
   80b04:	4641      	mov	r1, r8
   80b06:	f104 0034 	add.w	r0, r4, #52	; 0x34
   80b0a:	4b52      	ldr	r3, [pc, #328]	; (80c54 <xTaskGenericCreate+0x1a8>)
   80b0c:	4798      	blx	r3
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   80b0e:	2300      	movs	r3, #0
   80b10:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
   80b14:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
   80b16:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   80b18:	f104 0804 	add.w	r8, r4, #4
   80b1c:	4640      	mov	r0, r8
   80b1e:	4e4e      	ldr	r6, [pc, #312]	; (80c58 <xTaskGenericCreate+0x1ac>)
   80b20:	47b0      	blx	r6
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   80b22:	f104 0018 	add.w	r0, r4, #24
   80b26:	47b0      	blx	r6
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   80b28:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   80b2a:	f1c7 0305 	rsb	r3, r7, #5
   80b2e:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   80b30:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   80b32:	465a      	mov	r2, fp
   80b34:	4651      	mov	r1, sl
   80b36:	4628      	mov	r0, r5
   80b38:	4b48      	ldr	r3, [pc, #288]	; (80c5c <xTaskGenericCreate+0x1b0>)
   80b3a:	4798      	blx	r3
   80b3c:	6020      	str	r0, [r4, #0]
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   80b3e:	f010 0f07 	tst.w	r0, #7
   80b42:	d127      	bne.n	80b94 <xTaskGenericCreate+0xe8>
		if( ( void * ) pxCreatedTask != NULL )
   80b44:	f1b9 0f00 	cmp.w	r9, #0
   80b48:	d001      	beq.n	80b4e <xTaskGenericCreate+0xa2>
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   80b4a:	f8c9 4000 	str.w	r4, [r9]
		taskENTER_CRITICAL();
   80b4e:	4b44      	ldr	r3, [pc, #272]	; (80c60 <xTaskGenericCreate+0x1b4>)
   80b50:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
   80b52:	4a44      	ldr	r2, [pc, #272]	; (80c64 <xTaskGenericCreate+0x1b8>)
   80b54:	6813      	ldr	r3, [r2, #0]
   80b56:	3301      	adds	r3, #1
   80b58:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
   80b5a:	4b43      	ldr	r3, [pc, #268]	; (80c68 <xTaskGenericCreate+0x1bc>)
   80b5c:	681b      	ldr	r3, [r3, #0]
   80b5e:	b1eb      	cbz	r3, 80b9c <xTaskGenericCreate+0xf0>
				if( xSchedulerRunning == pdFALSE )
   80b60:	4b42      	ldr	r3, [pc, #264]	; (80c6c <xTaskGenericCreate+0x1c0>)
   80b62:	681b      	ldr	r3, [r3, #0]
   80b64:	2b00      	cmp	r3, #0
   80b66:	d140      	bne.n	80bea <xTaskGenericCreate+0x13e>
					if( pxCurrentTCB->uxPriority <= uxPriority )
   80b68:	4b3f      	ldr	r3, [pc, #252]	; (80c68 <xTaskGenericCreate+0x1bc>)
   80b6a:	681b      	ldr	r3, [r3, #0]
   80b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   80b6e:	429f      	cmp	r7, r3
						pxCurrentTCB = pxNewTCB;
   80b70:	bf24      	itt	cs
   80b72:	4b3d      	ldrcs	r3, [pc, #244]	; (80c68 <xTaskGenericCreate+0x1bc>)
   80b74:	601c      	strcs	r4, [r3, #0]
   80b76:	e038      	b.n	80bea <xTaskGenericCreate+0x13e>
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   80b78:	00a8      	lsls	r0, r5, #2
   80b7a:	4b34      	ldr	r3, [pc, #208]	; (80c4c <xTaskGenericCreate+0x1a0>)
   80b7c:	4798      	blx	r3
   80b7e:	4606      	mov	r6, r0
   80b80:	6320      	str	r0, [r4, #48]	; 0x30
		if( pxNewTCB->pxStack == NULL )
   80b82:	2800      	cmp	r0, #0
   80b84:	d1b0      	bne.n	80ae8 <xTaskGenericCreate+0x3c>
			vPortFree( pxNewTCB );
   80b86:	4620      	mov	r0, r4
   80b88:	4b39      	ldr	r3, [pc, #228]	; (80c70 <xTaskGenericCreate+0x1c4>)
   80b8a:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   80b8c:	f04f 30ff 	mov.w	r0, #4294967295
}
   80b90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   80b94:	4b2c      	ldr	r3, [pc, #176]	; (80c48 <xTaskGenericCreate+0x19c>)
   80b96:	4798      	blx	r3
   80b98:	bf00      	nop
   80b9a:	e7fd      	b.n	80b98 <xTaskGenericCreate+0xec>
				pxCurrentTCB =  pxNewTCB;
   80b9c:	4b32      	ldr	r3, [pc, #200]	; (80c68 <xTaskGenericCreate+0x1bc>)
   80b9e:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   80ba0:	6813      	ldr	r3, [r2, #0]
   80ba2:	2b01      	cmp	r3, #1
   80ba4:	d121      	bne.n	80bea <xTaskGenericCreate+0x13e>
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   80ba6:	4e33      	ldr	r6, [pc, #204]	; (80c74 <xTaskGenericCreate+0x1c8>)
   80ba8:	4630      	mov	r0, r6
   80baa:	4d33      	ldr	r5, [pc, #204]	; (80c78 <xTaskGenericCreate+0x1cc>)
   80bac:	47a8      	blx	r5
   80bae:	f106 0014 	add.w	r0, r6, #20
   80bb2:	47a8      	blx	r5
   80bb4:	f106 0028 	add.w	r0, r6, #40	; 0x28
   80bb8:	47a8      	blx	r5
   80bba:	f106 003c 	add.w	r0, r6, #60	; 0x3c
   80bbe:	47a8      	blx	r5
   80bc0:	f106 0050 	add.w	r0, r6, #80	; 0x50
   80bc4:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   80bc6:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 80cac <xTaskGenericCreate+0x200>
   80bca:	4648      	mov	r0, r9
   80bcc:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   80bce:	4e2b      	ldr	r6, [pc, #172]	; (80c7c <xTaskGenericCreate+0x1d0>)
   80bd0:	4630      	mov	r0, r6
   80bd2:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xPendingReadyList );
   80bd4:	482a      	ldr	r0, [pc, #168]	; (80c80 <xTaskGenericCreate+0x1d4>)
   80bd6:	47a8      	blx	r5
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   80bd8:	482a      	ldr	r0, [pc, #168]	; (80c84 <xTaskGenericCreate+0x1d8>)
   80bda:	47a8      	blx	r5
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   80bdc:	482a      	ldr	r0, [pc, #168]	; (80c88 <xTaskGenericCreate+0x1dc>)
   80bde:	47a8      	blx	r5
	pxDelayedTaskList = &xDelayedTaskList1;
   80be0:	4b2a      	ldr	r3, [pc, #168]	; (80c8c <xTaskGenericCreate+0x1e0>)
   80be2:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   80be6:	4b2a      	ldr	r3, [pc, #168]	; (80c90 <xTaskGenericCreate+0x1e4>)
   80be8:	601e      	str	r6, [r3, #0]
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   80bea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   80bec:	4b29      	ldr	r3, [pc, #164]	; (80c94 <xTaskGenericCreate+0x1e8>)
   80bee:	681b      	ldr	r3, [r3, #0]
   80bf0:	4298      	cmp	r0, r3
				uxTopUsedPriority = pxNewTCB->uxPriority;
   80bf2:	bf84      	itt	hi
   80bf4:	4b27      	ldrhi	r3, [pc, #156]	; (80c94 <xTaskGenericCreate+0x1e8>)
   80bf6:	6018      	strhi	r0, [r3, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   80bf8:	4a27      	ldr	r2, [pc, #156]	; (80c98 <xTaskGenericCreate+0x1ec>)
   80bfa:	6813      	ldr	r3, [r2, #0]
   80bfc:	6423      	str	r3, [r4, #64]	; 0x40
			uxTaskNumber++;
   80bfe:	3301      	adds	r3, #1
   80c00:	6013      	str	r3, [r2, #0]
			prvAddTaskToReadyQueue( pxNewTCB );
   80c02:	4b26      	ldr	r3, [pc, #152]	; (80c9c <xTaskGenericCreate+0x1f0>)
   80c04:	681b      	ldr	r3, [r3, #0]
   80c06:	4298      	cmp	r0, r3
   80c08:	bf84      	itt	hi
   80c0a:	4b24      	ldrhi	r3, [pc, #144]	; (80c9c <xTaskGenericCreate+0x1f0>)
   80c0c:	6018      	strhi	r0, [r3, #0]
   80c0e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   80c12:	4641      	mov	r1, r8
   80c14:	4b17      	ldr	r3, [pc, #92]	; (80c74 <xTaskGenericCreate+0x1c8>)
   80c16:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   80c1a:	4b21      	ldr	r3, [pc, #132]	; (80ca0 <xTaskGenericCreate+0x1f4>)
   80c1c:	4798      	blx	r3
		taskEXIT_CRITICAL();
   80c1e:	4b21      	ldr	r3, [pc, #132]	; (80ca4 <xTaskGenericCreate+0x1f8>)
   80c20:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
   80c22:	4b12      	ldr	r3, [pc, #72]	; (80c6c <xTaskGenericCreate+0x1c0>)
   80c24:	681b      	ldr	r3, [r3, #0]
   80c26:	b14b      	cbz	r3, 80c3c <xTaskGenericCreate+0x190>
			if( pxCurrentTCB->uxPriority < uxPriority )
   80c28:	4b0f      	ldr	r3, [pc, #60]	; (80c68 <xTaskGenericCreate+0x1bc>)
   80c2a:	681b      	ldr	r3, [r3, #0]
   80c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   80c2e:	429f      	cmp	r7, r3
   80c30:	d907      	bls.n	80c42 <xTaskGenericCreate+0x196>
				portYIELD_WITHIN_API();
   80c32:	4b1d      	ldr	r3, [pc, #116]	; (80ca8 <xTaskGenericCreate+0x1fc>)
   80c34:	4798      	blx	r3
   80c36:	2001      	movs	r0, #1
   80c38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80c3c:	2001      	movs	r0, #1
   80c3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80c42:	2001      	movs	r0, #1
	return xReturn;
   80c44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80c48:	00080259 	.word	0x00080259
   80c4c:	000803b9 	.word	0x000803b9
   80c50:	00082109 	.word	0x00082109
   80c54:	000821a5 	.word	0x000821a5
   80c58:	00080177 	.word	0x00080177
   80c5c:	0008020d 	.word	0x0008020d
   80c60:	00080269 	.word	0x00080269
   80c64:	2007a610 	.word	0x2007a610
   80c68:	2007a5a0 	.word	0x2007a5a0
   80c6c:	2007a670 	.word	0x2007a670
   80c70:	00080485 	.word	0x00080485
   80c74:	2007a5ac 	.word	0x2007a5ac
   80c78:	00080161 	.word	0x00080161
   80c7c:	2007a640 	.word	0x2007a640
   80c80:	2007a65c 	.word	0x2007a65c
   80c84:	2007a688 	.word	0x2007a688
   80c88:	2007a674 	.word	0x2007a674
   80c8c:	2007a5a4 	.word	0x2007a5a4
   80c90:	2007a5a8 	.word	0x2007a5a8
   80c94:	2007a628 	.word	0x2007a628
   80c98:	2007a61c 	.word	0x2007a61c
   80c9c:	2007a624 	.word	0x2007a624
   80ca0:	0008017d 	.word	0x0008017d
   80ca4:	00080289 	.word	0x00080289
   80ca8:	00080249 	.word	0x00080249
   80cac:	2007a62c 	.word	0x2007a62c

00080cb0 <vTaskStartScheduler>:
{
   80cb0:	b510      	push	{r4, lr}
   80cb2:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   80cb4:	2300      	movs	r3, #0
   80cb6:	9303      	str	r3, [sp, #12]
   80cb8:	9302      	str	r3, [sp, #8]
   80cba:	9301      	str	r3, [sp, #4]
   80cbc:	9300      	str	r3, [sp, #0]
   80cbe:	2282      	movs	r2, #130	; 0x82
   80cc0:	490d      	ldr	r1, [pc, #52]	; (80cf8 <vTaskStartScheduler+0x48>)
   80cc2:	480e      	ldr	r0, [pc, #56]	; (80cfc <vTaskStartScheduler+0x4c>)
   80cc4:	4c0e      	ldr	r4, [pc, #56]	; (80d00 <vTaskStartScheduler+0x50>)
   80cc6:	47a0      	blx	r4
		if( xReturn == pdPASS )
   80cc8:	2801      	cmp	r0, #1
   80cca:	d002      	beq.n	80cd2 <vTaskStartScheduler+0x22>
	configASSERT( xReturn );
   80ccc:	b180      	cbz	r0, 80cf0 <vTaskStartScheduler+0x40>
}
   80cce:	b004      	add	sp, #16
   80cd0:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
   80cd2:	4b0c      	ldr	r3, [pc, #48]	; (80d04 <vTaskStartScheduler+0x54>)
   80cd4:	4798      	blx	r3
	if( xReturn == pdPASS )
   80cd6:	2801      	cmp	r0, #1
   80cd8:	d1f8      	bne.n	80ccc <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
   80cda:	4b0b      	ldr	r3, [pc, #44]	; (80d08 <vTaskStartScheduler+0x58>)
   80cdc:	4798      	blx	r3
		xSchedulerRunning = pdTRUE;
   80cde:	2201      	movs	r2, #1
   80ce0:	4b0a      	ldr	r3, [pc, #40]	; (80d0c <vTaskStartScheduler+0x5c>)
   80ce2:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
   80ce4:	2200      	movs	r2, #0
   80ce6:	4b0a      	ldr	r3, [pc, #40]	; (80d10 <vTaskStartScheduler+0x60>)
   80ce8:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
   80cea:	4b0a      	ldr	r3, [pc, #40]	; (80d14 <vTaskStartScheduler+0x64>)
   80cec:	4798      	blx	r3
   80cee:	e7ee      	b.n	80cce <vTaskStartScheduler+0x1e>
	configASSERT( xReturn );
   80cf0:	4b05      	ldr	r3, [pc, #20]	; (80d08 <vTaskStartScheduler+0x58>)
   80cf2:	4798      	blx	r3
   80cf4:	bf00      	nop
   80cf6:	e7fd      	b.n	80cf4 <vTaskStartScheduler+0x44>
   80cf8:	00082328 	.word	0x00082328
   80cfc:	00080f71 	.word	0x00080f71
   80d00:	00080aad 	.word	0x00080aad
   80d04:	0008141d 	.word	0x0008141d
   80d08:	00080259 	.word	0x00080259
   80d0c:	2007a670 	.word	0x2007a670
   80d10:	2007a69c 	.word	0x2007a69c
   80d14:	00080329 	.word	0x00080329

00080d18 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
   80d18:	4a02      	ldr	r2, [pc, #8]	; (80d24 <vTaskSuspendAll+0xc>)
   80d1a:	6813      	ldr	r3, [r2, #0]
   80d1c:	3301      	adds	r3, #1
   80d1e:	6013      	str	r3, [r2, #0]
   80d20:	4770      	bx	lr
   80d22:	bf00      	nop
   80d24:	2007a618 	.word	0x2007a618

00080d28 <xTaskGetTickCount>:
{
   80d28:	b510      	push	{r4, lr}
	taskENTER_CRITICAL();
   80d2a:	4b04      	ldr	r3, [pc, #16]	; (80d3c <xTaskGetTickCount+0x14>)
   80d2c:	4798      	blx	r3
		xTicks = xTickCount;
   80d2e:	4b04      	ldr	r3, [pc, #16]	; (80d40 <xTaskGetTickCount+0x18>)
   80d30:	681c      	ldr	r4, [r3, #0]
	taskEXIT_CRITICAL();
   80d32:	4b04      	ldr	r3, [pc, #16]	; (80d44 <xTaskGetTickCount+0x1c>)
   80d34:	4798      	blx	r3
}
   80d36:	4620      	mov	r0, r4
   80d38:	bd10      	pop	{r4, pc}
   80d3a:	bf00      	nop
   80d3c:	00080269 	.word	0x00080269
   80d40:	2007a69c 	.word	0x2007a69c
   80d44:	00080289 	.word	0x00080289

00080d48 <vTaskIncrementTick>:
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   80d48:	4b3d      	ldr	r3, [pc, #244]	; (80e40 <vTaskIncrementTick+0xf8>)
   80d4a:	681b      	ldr	r3, [r3, #0]
   80d4c:	2b00      	cmp	r3, #0
   80d4e:	d16f      	bne.n	80e30 <vTaskIncrementTick+0xe8>
{
   80d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		++xTickCount;
   80d54:	4b3b      	ldr	r3, [pc, #236]	; (80e44 <vTaskIncrementTick+0xfc>)
   80d56:	681a      	ldr	r2, [r3, #0]
   80d58:	3201      	adds	r2, #1
   80d5a:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   80d5c:	681b      	ldr	r3, [r3, #0]
   80d5e:	b9ab      	cbnz	r3, 80d8c <vTaskIncrementTick+0x44>
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   80d60:	4b39      	ldr	r3, [pc, #228]	; (80e48 <vTaskIncrementTick+0x100>)
   80d62:	681b      	ldr	r3, [r3, #0]
   80d64:	681b      	ldr	r3, [r3, #0]
   80d66:	2b00      	cmp	r3, #0
   80d68:	d128      	bne.n	80dbc <vTaskIncrementTick+0x74>
			pxTemp = pxDelayedTaskList;
   80d6a:	4b37      	ldr	r3, [pc, #220]	; (80e48 <vTaskIncrementTick+0x100>)
   80d6c:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   80d6e:	4a37      	ldr	r2, [pc, #220]	; (80e4c <vTaskIncrementTick+0x104>)
   80d70:	6810      	ldr	r0, [r2, #0]
   80d72:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   80d74:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   80d76:	4936      	ldr	r1, [pc, #216]	; (80e50 <vTaskIncrementTick+0x108>)
   80d78:	680a      	ldr	r2, [r1, #0]
   80d7a:	3201      	adds	r2, #1
   80d7c:	600a      	str	r2, [r1, #0]
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   80d7e:	681b      	ldr	r3, [r3, #0]
   80d80:	681b      	ldr	r3, [r3, #0]
   80d82:	b9fb      	cbnz	r3, 80dc4 <vTaskIncrementTick+0x7c>
				xNextTaskUnblockTime = portMAX_DELAY;
   80d84:	f04f 32ff 	mov.w	r2, #4294967295
   80d88:	4b32      	ldr	r3, [pc, #200]	; (80e54 <vTaskIncrementTick+0x10c>)
   80d8a:	601a      	str	r2, [r3, #0]
		prvCheckDelayedTasks();
   80d8c:	4b2d      	ldr	r3, [pc, #180]	; (80e44 <vTaskIncrementTick+0xfc>)
   80d8e:	681a      	ldr	r2, [r3, #0]
   80d90:	4b30      	ldr	r3, [pc, #192]	; (80e54 <vTaskIncrementTick+0x10c>)
   80d92:	681b      	ldr	r3, [r3, #0]
   80d94:	429a      	cmp	r2, r3
   80d96:	d350      	bcc.n	80e3a <vTaskIncrementTick+0xf2>
   80d98:	4b2b      	ldr	r3, [pc, #172]	; (80e48 <vTaskIncrementTick+0x100>)
   80d9a:	681b      	ldr	r3, [r3, #0]
   80d9c:	681b      	ldr	r3, [r3, #0]
   80d9e:	b1cb      	cbz	r3, 80dd4 <vTaskIncrementTick+0x8c>
   80da0:	4b29      	ldr	r3, [pc, #164]	; (80e48 <vTaskIncrementTick+0x100>)
   80da2:	681b      	ldr	r3, [r3, #0]
   80da4:	68db      	ldr	r3, [r3, #12]
   80da6:	68dc      	ldr	r4, [r3, #12]
   80da8:	6863      	ldr	r3, [r4, #4]
   80daa:	4a26      	ldr	r2, [pc, #152]	; (80e44 <vTaskIncrementTick+0xfc>)
   80dac:	6812      	ldr	r2, [r2, #0]
   80dae:	4293      	cmp	r3, r2
   80db0:	d816      	bhi.n	80de0 <vTaskIncrementTick+0x98>
   80db2:	4e29      	ldr	r6, [pc, #164]	; (80e58 <vTaskIncrementTick+0x110>)
   80db4:	4f29      	ldr	r7, [pc, #164]	; (80e5c <vTaskIncrementTick+0x114>)
   80db6:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 80e6c <vTaskIncrementTick+0x124>
   80dba:	e02f      	b.n	80e1c <vTaskIncrementTick+0xd4>
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   80dbc:	4b28      	ldr	r3, [pc, #160]	; (80e60 <vTaskIncrementTick+0x118>)
   80dbe:	4798      	blx	r3
   80dc0:	bf00      	nop
   80dc2:	e7fd      	b.n	80dc0 <vTaskIncrementTick+0x78>
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   80dc4:	4b20      	ldr	r3, [pc, #128]	; (80e48 <vTaskIncrementTick+0x100>)
   80dc6:	681b      	ldr	r3, [r3, #0]
   80dc8:	68db      	ldr	r3, [r3, #12]
   80dca:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   80dcc:	685a      	ldr	r2, [r3, #4]
   80dce:	4b21      	ldr	r3, [pc, #132]	; (80e54 <vTaskIncrementTick+0x10c>)
   80dd0:	601a      	str	r2, [r3, #0]
   80dd2:	e7db      	b.n	80d8c <vTaskIncrementTick+0x44>
		prvCheckDelayedTasks();
   80dd4:	f04f 32ff 	mov.w	r2, #4294967295
   80dd8:	4b1e      	ldr	r3, [pc, #120]	; (80e54 <vTaskIncrementTick+0x10c>)
   80dda:	601a      	str	r2, [r3, #0]
   80ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80de0:	4a1c      	ldr	r2, [pc, #112]	; (80e54 <vTaskIncrementTick+0x10c>)
   80de2:	6013      	str	r3, [r2, #0]
   80de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80de8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   80dea:	683b      	ldr	r3, [r7, #0]
   80dec:	4298      	cmp	r0, r3
   80dee:	bf88      	it	hi
   80df0:	6038      	strhi	r0, [r7, #0]
   80df2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   80df6:	4629      	mov	r1, r5
   80df8:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   80dfc:	4b19      	ldr	r3, [pc, #100]	; (80e64 <vTaskIncrementTick+0x11c>)
   80dfe:	4798      	blx	r3
   80e00:	4b11      	ldr	r3, [pc, #68]	; (80e48 <vTaskIncrementTick+0x100>)
   80e02:	681b      	ldr	r3, [r3, #0]
   80e04:	681b      	ldr	r3, [r3, #0]
   80e06:	2b00      	cmp	r3, #0
   80e08:	d0e4      	beq.n	80dd4 <vTaskIncrementTick+0x8c>
   80e0a:	4b0f      	ldr	r3, [pc, #60]	; (80e48 <vTaskIncrementTick+0x100>)
   80e0c:	681b      	ldr	r3, [r3, #0]
   80e0e:	68db      	ldr	r3, [r3, #12]
   80e10:	68dc      	ldr	r4, [r3, #12]
   80e12:	6863      	ldr	r3, [r4, #4]
   80e14:	4a0b      	ldr	r2, [pc, #44]	; (80e44 <vTaskIncrementTick+0xfc>)
   80e16:	6812      	ldr	r2, [r2, #0]
   80e18:	4293      	cmp	r3, r2
   80e1a:	d8e1      	bhi.n	80de0 <vTaskIncrementTick+0x98>
   80e1c:	1d25      	adds	r5, r4, #4
   80e1e:	4628      	mov	r0, r5
   80e20:	47b0      	blx	r6
   80e22:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   80e24:	2b00      	cmp	r3, #0
   80e26:	d0df      	beq.n	80de8 <vTaskIncrementTick+0xa0>
   80e28:	f104 0018 	add.w	r0, r4, #24
   80e2c:	47b0      	blx	r6
   80e2e:	e7db      	b.n	80de8 <vTaskIncrementTick+0xa0>
		++uxMissedTicks;
   80e30:	4a0d      	ldr	r2, [pc, #52]	; (80e68 <vTaskIncrementTick+0x120>)
   80e32:	6813      	ldr	r3, [r2, #0]
   80e34:	3301      	adds	r3, #1
   80e36:	6013      	str	r3, [r2, #0]
}
   80e38:	4770      	bx	lr
   80e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80e3e:	bf00      	nop
   80e40:	2007a618 	.word	0x2007a618
   80e44:	2007a69c 	.word	0x2007a69c
   80e48:	2007a5a4 	.word	0x2007a5a4
   80e4c:	2007a5a8 	.word	0x2007a5a8
   80e50:	2007a658 	.word	0x2007a658
   80e54:	20070140 	.word	0x20070140
   80e58:	000801d3 	.word	0x000801d3
   80e5c:	2007a624 	.word	0x2007a624
   80e60:	00080259 	.word	0x00080259
   80e64:	0008017d 	.word	0x0008017d
   80e68:	2007a614 	.word	0x2007a614
   80e6c:	2007a5ac 	.word	0x2007a5ac

00080e70 <xTaskResumeAll>:
{
   80e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
   80e74:	4b2f      	ldr	r3, [pc, #188]	; (80f34 <xTaskResumeAll+0xc4>)
   80e76:	681b      	ldr	r3, [r3, #0]
   80e78:	b91b      	cbnz	r3, 80e82 <xTaskResumeAll+0x12>
   80e7a:	4b2f      	ldr	r3, [pc, #188]	; (80f38 <xTaskResumeAll+0xc8>)
   80e7c:	4798      	blx	r3
   80e7e:	bf00      	nop
   80e80:	e7fd      	b.n	80e7e <xTaskResumeAll+0xe>
	taskENTER_CRITICAL();
   80e82:	4b2e      	ldr	r3, [pc, #184]	; (80f3c <xTaskResumeAll+0xcc>)
   80e84:	4798      	blx	r3
		--uxSchedulerSuspended;
   80e86:	4b2b      	ldr	r3, [pc, #172]	; (80f34 <xTaskResumeAll+0xc4>)
   80e88:	681a      	ldr	r2, [r3, #0]
   80e8a:	3a01      	subs	r2, #1
   80e8c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   80e8e:	681b      	ldr	r3, [r3, #0]
   80e90:	2b00      	cmp	r3, #0
   80e92:	d14d      	bne.n	80f30 <xTaskResumeAll+0xc0>
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   80e94:	4b2a      	ldr	r3, [pc, #168]	; (80f40 <xTaskResumeAll+0xd0>)
   80e96:	681b      	ldr	r3, [r3, #0]
   80e98:	b12b      	cbz	r3, 80ea6 <xTaskResumeAll+0x36>
   80e9a:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   80e9c:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 80f6c <xTaskResumeAll+0xfc>
					uxListRemove( &( pxTCB->xEventListItem ) );
   80ea0:	4f28      	ldr	r7, [pc, #160]	; (80f44 <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyQueue( pxTCB );
   80ea2:	4e29      	ldr	r6, [pc, #164]	; (80f48 <xTaskResumeAll+0xd8>)
   80ea4:	e023      	b.n	80eee <xTaskResumeAll+0x7e>
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   80ea6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
   80ea8:	4b28      	ldr	r3, [pc, #160]	; (80f4c <xTaskResumeAll+0xdc>)
   80eaa:	4798      	blx	r3
}
   80eac:	4620      	mov	r0, r4
   80eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   80eb2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   80eb6:	68dd      	ldr	r5, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
   80eb8:	f105 0018 	add.w	r0, r5, #24
   80ebc:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
   80ebe:	f105 0904 	add.w	r9, r5, #4
   80ec2:	4648      	mov	r0, r9
   80ec4:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
   80ec6:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   80ec8:	6833      	ldr	r3, [r6, #0]
   80eca:	4298      	cmp	r0, r3
   80ecc:	bf88      	it	hi
   80ece:	6030      	strhi	r0, [r6, #0]
   80ed0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   80ed4:	4649      	mov	r1, r9
   80ed6:	4b1e      	ldr	r3, [pc, #120]	; (80f50 <xTaskResumeAll+0xe0>)
   80ed8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   80edc:	4b1d      	ldr	r3, [pc, #116]	; (80f54 <xTaskResumeAll+0xe4>)
   80ede:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   80ee0:	4b1d      	ldr	r3, [pc, #116]	; (80f58 <xTaskResumeAll+0xe8>)
   80ee2:	681b      	ldr	r3, [r3, #0]
   80ee4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   80ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						xYieldRequired = pdTRUE;
   80ee8:	429a      	cmp	r2, r3
   80eea:	bf28      	it	cs
   80eec:	2401      	movcs	r4, #1
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   80eee:	f8d8 3000 	ldr.w	r3, [r8]
   80ef2:	2b00      	cmp	r3, #0
   80ef4:	d1dd      	bne.n	80eb2 <xTaskResumeAll+0x42>
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   80ef6:	4b19      	ldr	r3, [pc, #100]	; (80f5c <xTaskResumeAll+0xec>)
   80ef8:	681b      	ldr	r3, [r3, #0]
   80efa:	b193      	cbz	r3, 80f22 <xTaskResumeAll+0xb2>
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   80efc:	4b17      	ldr	r3, [pc, #92]	; (80f5c <xTaskResumeAll+0xec>)
   80efe:	681b      	ldr	r3, [r3, #0]
   80f00:	b143      	cbz	r3, 80f14 <xTaskResumeAll+0xa4>
						vTaskIncrementTick();
   80f02:	4d17      	ldr	r5, [pc, #92]	; (80f60 <xTaskResumeAll+0xf0>)
						--uxMissedTicks;
   80f04:	4c15      	ldr	r4, [pc, #84]	; (80f5c <xTaskResumeAll+0xec>)
						vTaskIncrementTick();
   80f06:	47a8      	blx	r5
						--uxMissedTicks;
   80f08:	6823      	ldr	r3, [r4, #0]
   80f0a:	3b01      	subs	r3, #1
   80f0c:	6023      	str	r3, [r4, #0]
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   80f0e:	6823      	ldr	r3, [r4, #0]
   80f10:	2b00      	cmp	r3, #0
   80f12:	d1f8      	bne.n	80f06 <xTaskResumeAll+0x96>
					xMissedYield = pdFALSE;
   80f14:	2200      	movs	r2, #0
   80f16:	4b13      	ldr	r3, [pc, #76]	; (80f64 <xTaskResumeAll+0xf4>)
   80f18:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
   80f1a:	4b13      	ldr	r3, [pc, #76]	; (80f68 <xTaskResumeAll+0xf8>)
   80f1c:	4798      	blx	r3
					xAlreadyYielded = pdTRUE;
   80f1e:	2401      	movs	r4, #1
   80f20:	e7c2      	b.n	80ea8 <xTaskResumeAll+0x38>
				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   80f22:	2c01      	cmp	r4, #1
   80f24:	d0f6      	beq.n	80f14 <xTaskResumeAll+0xa4>
   80f26:	4b0f      	ldr	r3, [pc, #60]	; (80f64 <xTaskResumeAll+0xf4>)
   80f28:	681b      	ldr	r3, [r3, #0]
   80f2a:	2b01      	cmp	r3, #1
   80f2c:	d1bc      	bne.n	80ea8 <xTaskResumeAll+0x38>
   80f2e:	e7f1      	b.n	80f14 <xTaskResumeAll+0xa4>
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   80f30:	2400      	movs	r4, #0
   80f32:	e7b9      	b.n	80ea8 <xTaskResumeAll+0x38>
   80f34:	2007a618 	.word	0x2007a618
   80f38:	00080259 	.word	0x00080259
   80f3c:	00080269 	.word	0x00080269
   80f40:	2007a610 	.word	0x2007a610
   80f44:	000801d3 	.word	0x000801d3
   80f48:	2007a624 	.word	0x2007a624
   80f4c:	00080289 	.word	0x00080289
   80f50:	2007a5ac 	.word	0x2007a5ac
   80f54:	0008017d 	.word	0x0008017d
   80f58:	2007a5a0 	.word	0x2007a5a0
   80f5c:	2007a614 	.word	0x2007a614
   80f60:	00080d49 	.word	0x00080d49
   80f64:	2007a654 	.word	0x2007a654
   80f68:	00080249 	.word	0x00080249
   80f6c:	2007a65c 	.word	0x2007a65c

00080f70 <prvIdleTask>:
{
   80f70:	b580      	push	{r7, lr}
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   80f72:	4d16      	ldr	r5, [pc, #88]	; (80fcc <prvIdleTask+0x5c>)
			vTaskSuspendAll();
   80f74:	f8df 8078 	ldr.w	r8, [pc, #120]	; 80ff0 <prvIdleTask+0x80>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   80f78:	4e15      	ldr	r6, [pc, #84]	; (80fd0 <prvIdleTask+0x60>)
   80f7a:	e024      	b.n	80fc6 <prvIdleTask+0x56>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   80f7c:	4b15      	ldr	r3, [pc, #84]	; (80fd4 <prvIdleTask+0x64>)
   80f7e:	681b      	ldr	r3, [r3, #0]
   80f80:	2b01      	cmp	r3, #1
   80f82:	d81e      	bhi.n	80fc2 <prvIdleTask+0x52>
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   80f84:	682b      	ldr	r3, [r5, #0]
   80f86:	2b00      	cmp	r3, #0
   80f88:	d0f8      	beq.n	80f7c <prvIdleTask+0xc>
			vTaskSuspendAll();
   80f8a:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   80f8c:	6834      	ldr	r4, [r6, #0]
			xTaskResumeAll();
   80f8e:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
   80f90:	2c00      	cmp	r4, #0
   80f92:	d0f7      	beq.n	80f84 <prvIdleTask+0x14>
				taskENTER_CRITICAL();
   80f94:	4b10      	ldr	r3, [pc, #64]	; (80fd8 <prvIdleTask+0x68>)
   80f96:	4798      	blx	r3
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   80f98:	68f3      	ldr	r3, [r6, #12]
   80f9a:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
   80f9c:	1d20      	adds	r0, r4, #4
   80f9e:	4b0f      	ldr	r3, [pc, #60]	; (80fdc <prvIdleTask+0x6c>)
   80fa0:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   80fa2:	4a0f      	ldr	r2, [pc, #60]	; (80fe0 <prvIdleTask+0x70>)
   80fa4:	6813      	ldr	r3, [r2, #0]
   80fa6:	3b01      	subs	r3, #1
   80fa8:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
   80faa:	682b      	ldr	r3, [r5, #0]
   80fac:	3b01      	subs	r3, #1
   80fae:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
   80fb0:	4b0c      	ldr	r3, [pc, #48]	; (80fe4 <prvIdleTask+0x74>)
   80fb2:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   80fb4:	6b20      	ldr	r0, [r4, #48]	; 0x30
   80fb6:	f8df 903c 	ldr.w	r9, [pc, #60]	; 80ff4 <prvIdleTask+0x84>
   80fba:	47c8      	blx	r9
		vPortFree( pxTCB );
   80fbc:	4620      	mov	r0, r4
   80fbe:	47c8      	blx	r9
   80fc0:	e7e0      	b.n	80f84 <prvIdleTask+0x14>
				taskYIELD();
   80fc2:	4b09      	ldr	r3, [pc, #36]	; (80fe8 <prvIdleTask+0x78>)
   80fc4:	4798      	blx	r3
			xTaskResumeAll();
   80fc6:	4f09      	ldr	r7, [pc, #36]	; (80fec <prvIdleTask+0x7c>)
   80fc8:	e7dc      	b.n	80f84 <prvIdleTask+0x14>
   80fca:	bf00      	nop
   80fcc:	2007a620 	.word	0x2007a620
   80fd0:	2007a688 	.word	0x2007a688
   80fd4:	2007a5ac 	.word	0x2007a5ac
   80fd8:	00080269 	.word	0x00080269
   80fdc:	000801d3 	.word	0x000801d3
   80fe0:	2007a610 	.word	0x2007a610
   80fe4:	00080289 	.word	0x00080289
   80fe8:	00080249 	.word	0x00080249
   80fec:	00080e71 	.word	0x00080e71
   80ff0:	00080d19 	.word	0x00080d19
   80ff4:	00080485 	.word	0x00080485

00080ff8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   80ff8:	4b21      	ldr	r3, [pc, #132]	; (81080 <vTaskSwitchContext+0x88>)
   80ffa:	681b      	ldr	r3, [r3, #0]
   80ffc:	b9eb      	cbnz	r3, 8103a <vTaskSwitchContext+0x42>
{
   80ffe:	b510      	push	{r4, lr}
		taskSELECT_HIGHEST_PRIORITY_TASK();
   81000:	4b20      	ldr	r3, [pc, #128]	; (81084 <vTaskSwitchContext+0x8c>)
   81002:	681b      	ldr	r3, [r3, #0]
   81004:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81008:	009b      	lsls	r3, r3, #2
   8100a:	4a1f      	ldr	r2, [pc, #124]	; (81088 <vTaskSwitchContext+0x90>)
   8100c:	58d3      	ldr	r3, [r2, r3]
   8100e:	b9c3      	cbnz	r3, 81042 <vTaskSwitchContext+0x4a>
   81010:	4b1c      	ldr	r3, [pc, #112]	; (81084 <vTaskSwitchContext+0x8c>)
   81012:	681b      	ldr	r3, [r3, #0]
   81014:	b16b      	cbz	r3, 81032 <vTaskSwitchContext+0x3a>
   81016:	4a1b      	ldr	r2, [pc, #108]	; (81084 <vTaskSwitchContext+0x8c>)
   81018:	491b      	ldr	r1, [pc, #108]	; (81088 <vTaskSwitchContext+0x90>)
   8101a:	6813      	ldr	r3, [r2, #0]
   8101c:	3b01      	subs	r3, #1
   8101e:	6013      	str	r3, [r2, #0]
   81020:	6813      	ldr	r3, [r2, #0]
   81022:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81026:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   8102a:	b953      	cbnz	r3, 81042 <vTaskSwitchContext+0x4a>
   8102c:	6813      	ldr	r3, [r2, #0]
   8102e:	2b00      	cmp	r3, #0
   81030:	d1f3      	bne.n	8101a <vTaskSwitchContext+0x22>
   81032:	4b16      	ldr	r3, [pc, #88]	; (8108c <vTaskSwitchContext+0x94>)
   81034:	4798      	blx	r3
   81036:	bf00      	nop
   81038:	e7fd      	b.n	81036 <vTaskSwitchContext+0x3e>
		xMissedYield = pdTRUE;
   8103a:	2201      	movs	r2, #1
   8103c:	4b14      	ldr	r3, [pc, #80]	; (81090 <vTaskSwitchContext+0x98>)
   8103e:	601a      	str	r2, [r3, #0]
   81040:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
   81042:	4b10      	ldr	r3, [pc, #64]	; (81084 <vTaskSwitchContext+0x8c>)
   81044:	681b      	ldr	r3, [r3, #0]
   81046:	4a10      	ldr	r2, [pc, #64]	; (81088 <vTaskSwitchContext+0x90>)
   81048:	0099      	lsls	r1, r3, #2
   8104a:	18c8      	adds	r0, r1, r3
   8104c:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   81050:	6844      	ldr	r4, [r0, #4]
   81052:	6864      	ldr	r4, [r4, #4]
   81054:	6044      	str	r4, [r0, #4]
   81056:	4419      	add	r1, r3
   81058:	4602      	mov	r2, r0
   8105a:	3208      	adds	r2, #8
   8105c:	4294      	cmp	r4, r2
   8105e:	d009      	beq.n	81074 <vTaskSwitchContext+0x7c>
   81060:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81064:	4a08      	ldr	r2, [pc, #32]	; (81088 <vTaskSwitchContext+0x90>)
   81066:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   8106a:	685b      	ldr	r3, [r3, #4]
   8106c:	68da      	ldr	r2, [r3, #12]
   8106e:	4b09      	ldr	r3, [pc, #36]	; (81094 <vTaskSwitchContext+0x9c>)
   81070:	601a      	str	r2, [r3, #0]
   81072:	bd10      	pop	{r4, pc}
   81074:	6860      	ldr	r0, [r4, #4]
   81076:	4a04      	ldr	r2, [pc, #16]	; (81088 <vTaskSwitchContext+0x90>)
   81078:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   8107c:	6050      	str	r0, [r2, #4]
   8107e:	e7ef      	b.n	81060 <vTaskSwitchContext+0x68>
   81080:	2007a618 	.word	0x2007a618
   81084:	2007a624 	.word	0x2007a624
   81088:	2007a5ac 	.word	0x2007a5ac
   8108c:	00080259 	.word	0x00080259
   81090:	2007a654 	.word	0x2007a654
   81094:	2007a5a0 	.word	0x2007a5a0

00081098 <vTaskPlaceOnEventList>:
{
   81098:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
   8109a:	b190      	cbz	r0, 810c2 <vTaskPlaceOnEventList+0x2a>
   8109c:	460c      	mov	r4, r1
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   8109e:	4d0e      	ldr	r5, [pc, #56]	; (810d8 <vTaskPlaceOnEventList+0x40>)
   810a0:	6829      	ldr	r1, [r5, #0]
   810a2:	3118      	adds	r1, #24
   810a4:	4b0d      	ldr	r3, [pc, #52]	; (810dc <vTaskPlaceOnEventList+0x44>)
   810a6:	4798      	blx	r3
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   810a8:	6828      	ldr	r0, [r5, #0]
   810aa:	3004      	adds	r0, #4
   810ac:	4b0c      	ldr	r3, [pc, #48]	; (810e0 <vTaskPlaceOnEventList+0x48>)
   810ae:	4798      	blx	r3
		if( xTicksToWait == portMAX_DELAY )
   810b0:	f1b4 3fff 	cmp.w	r4, #4294967295
   810b4:	d009      	beq.n	810ca <vTaskPlaceOnEventList+0x32>
			xTimeToWake = xTickCount + xTicksToWait;
   810b6:	4b0b      	ldr	r3, [pc, #44]	; (810e4 <vTaskPlaceOnEventList+0x4c>)
   810b8:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   810ba:	4420      	add	r0, r4
   810bc:	4b0a      	ldr	r3, [pc, #40]	; (810e8 <vTaskPlaceOnEventList+0x50>)
   810be:	4798      	blx	r3
   810c0:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxEventList );
   810c2:	4b0a      	ldr	r3, [pc, #40]	; (810ec <vTaskPlaceOnEventList+0x54>)
   810c4:	4798      	blx	r3
   810c6:	bf00      	nop
   810c8:	e7fd      	b.n	810c6 <vTaskPlaceOnEventList+0x2e>
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   810ca:	6829      	ldr	r1, [r5, #0]
   810cc:	3104      	adds	r1, #4
   810ce:	4808      	ldr	r0, [pc, #32]	; (810f0 <vTaskPlaceOnEventList+0x58>)
   810d0:	4b08      	ldr	r3, [pc, #32]	; (810f4 <vTaskPlaceOnEventList+0x5c>)
   810d2:	4798      	blx	r3
   810d4:	bd38      	pop	{r3, r4, r5, pc}
   810d6:	bf00      	nop
   810d8:	2007a5a0 	.word	0x2007a5a0
   810dc:	00080199 	.word	0x00080199
   810e0:	000801d3 	.word	0x000801d3
   810e4:	2007a69c 	.word	0x2007a69c
   810e8:	00080a55 	.word	0x00080a55
   810ec:	00080259 	.word	0x00080259
   810f0:	2007a674 	.word	0x2007a674
   810f4:	0008017d 	.word	0x0008017d

000810f8 <vTaskPlaceOnEventListRestricted>:
	{
   810f8:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
   810fa:	b178      	cbz	r0, 8111c <vTaskPlaceOnEventListRestricted+0x24>
   810fc:	460d      	mov	r5, r1
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   810fe:	4c09      	ldr	r4, [pc, #36]	; (81124 <vTaskPlaceOnEventListRestricted+0x2c>)
   81100:	6821      	ldr	r1, [r4, #0]
   81102:	3118      	adds	r1, #24
   81104:	4b08      	ldr	r3, [pc, #32]	; (81128 <vTaskPlaceOnEventListRestricted+0x30>)
   81106:	4798      	blx	r3
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81108:	6820      	ldr	r0, [r4, #0]
   8110a:	3004      	adds	r0, #4
   8110c:	4b07      	ldr	r3, [pc, #28]	; (8112c <vTaskPlaceOnEventListRestricted+0x34>)
   8110e:	4798      	blx	r3
		xTimeToWake = xTickCount + xTicksToWait;
   81110:	4b07      	ldr	r3, [pc, #28]	; (81130 <vTaskPlaceOnEventListRestricted+0x38>)
   81112:	6818      	ldr	r0, [r3, #0]
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   81114:	4428      	add	r0, r5
   81116:	4b07      	ldr	r3, [pc, #28]	; (81134 <vTaskPlaceOnEventListRestricted+0x3c>)
   81118:	4798      	blx	r3
   8111a:	bd38      	pop	{r3, r4, r5, pc}
		configASSERT( pxEventList );
   8111c:	4b06      	ldr	r3, [pc, #24]	; (81138 <vTaskPlaceOnEventListRestricted+0x40>)
   8111e:	4798      	blx	r3
   81120:	bf00      	nop
   81122:	e7fd      	b.n	81120 <vTaskPlaceOnEventListRestricted+0x28>
   81124:	2007a5a0 	.word	0x2007a5a0
   81128:	0008017d 	.word	0x0008017d
   8112c:	000801d3 	.word	0x000801d3
   81130:	2007a69c 	.word	0x2007a69c
   81134:	00080a55 	.word	0x00080a55
   81138:	00080259 	.word	0x00080259

0008113c <xTaskRemoveFromEventList>:
{
   8113c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   8113e:	68c3      	ldr	r3, [r0, #12]
   81140:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   81142:	b31c      	cbz	r4, 8118c <xTaskRemoveFromEventList+0x50>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   81144:	f104 0518 	add.w	r5, r4, #24
   81148:	4628      	mov	r0, r5
   8114a:	4b15      	ldr	r3, [pc, #84]	; (811a0 <xTaskRemoveFromEventList+0x64>)
   8114c:	4798      	blx	r3
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   8114e:	4b15      	ldr	r3, [pc, #84]	; (811a4 <xTaskRemoveFromEventList+0x68>)
   81150:	681b      	ldr	r3, [r3, #0]
   81152:	b9fb      	cbnz	r3, 81194 <xTaskRemoveFromEventList+0x58>
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   81154:	1d25      	adds	r5, r4, #4
   81156:	4628      	mov	r0, r5
   81158:	4b11      	ldr	r3, [pc, #68]	; (811a0 <xTaskRemoveFromEventList+0x64>)
   8115a:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   8115c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   8115e:	4b12      	ldr	r3, [pc, #72]	; (811a8 <xTaskRemoveFromEventList+0x6c>)
   81160:	681b      	ldr	r3, [r3, #0]
   81162:	4298      	cmp	r0, r3
   81164:	bf84      	itt	hi
   81166:	4b10      	ldrhi	r3, [pc, #64]	; (811a8 <xTaskRemoveFromEventList+0x6c>)
   81168:	6018      	strhi	r0, [r3, #0]
   8116a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   8116e:	4629      	mov	r1, r5
   81170:	4b0e      	ldr	r3, [pc, #56]	; (811ac <xTaskRemoveFromEventList+0x70>)
   81172:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81176:	4b0e      	ldr	r3, [pc, #56]	; (811b0 <xTaskRemoveFromEventList+0x74>)
   81178:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   8117a:	4b0e      	ldr	r3, [pc, #56]	; (811b4 <xTaskRemoveFromEventList+0x78>)
   8117c:	681b      	ldr	r3, [r3, #0]
   8117e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
   81182:	4298      	cmp	r0, r3
   81184:	bf34      	ite	cc
   81186:	2000      	movcc	r0, #0
   81188:	2001      	movcs	r0, #1
   8118a:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxUnblockedTCB );
   8118c:	4b0a      	ldr	r3, [pc, #40]	; (811b8 <xTaskRemoveFromEventList+0x7c>)
   8118e:	4798      	blx	r3
   81190:	bf00      	nop
   81192:	e7fd      	b.n	81190 <xTaskRemoveFromEventList+0x54>
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   81194:	4629      	mov	r1, r5
   81196:	4809      	ldr	r0, [pc, #36]	; (811bc <xTaskRemoveFromEventList+0x80>)
   81198:	4b05      	ldr	r3, [pc, #20]	; (811b0 <xTaskRemoveFromEventList+0x74>)
   8119a:	4798      	blx	r3
   8119c:	e7ed      	b.n	8117a <xTaskRemoveFromEventList+0x3e>
   8119e:	bf00      	nop
   811a0:	000801d3 	.word	0x000801d3
   811a4:	2007a618 	.word	0x2007a618
   811a8:	2007a624 	.word	0x2007a624
   811ac:	2007a5ac 	.word	0x2007a5ac
   811b0:	0008017d 	.word	0x0008017d
   811b4:	2007a5a0 	.word	0x2007a5a0
   811b8:	00080259 	.word	0x00080259
   811bc:	2007a65c 	.word	0x2007a65c

000811c0 <vTaskSetTimeOutState>:
{
   811c0:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
   811c2:	b130      	cbz	r0, 811d2 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   811c4:	4a05      	ldr	r2, [pc, #20]	; (811dc <vTaskSetTimeOutState+0x1c>)
   811c6:	6812      	ldr	r2, [r2, #0]
   811c8:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   811ca:	4a05      	ldr	r2, [pc, #20]	; (811e0 <vTaskSetTimeOutState+0x20>)
   811cc:	6812      	ldr	r2, [r2, #0]
   811ce:	6042      	str	r2, [r0, #4]
   811d0:	bd08      	pop	{r3, pc}
	configASSERT( pxTimeOut );
   811d2:	4b04      	ldr	r3, [pc, #16]	; (811e4 <vTaskSetTimeOutState+0x24>)
   811d4:	4798      	blx	r3
   811d6:	bf00      	nop
   811d8:	e7fd      	b.n	811d6 <vTaskSetTimeOutState+0x16>
   811da:	bf00      	nop
   811dc:	2007a658 	.word	0x2007a658
   811e0:	2007a69c 	.word	0x2007a69c
   811e4:	00080259 	.word	0x00080259

000811e8 <xTaskCheckForTimeOut>:
{
   811e8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
   811ea:	b1e8      	cbz	r0, 81228 <xTaskCheckForTimeOut+0x40>
   811ec:	460d      	mov	r5, r1
   811ee:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
   811f0:	b1f1      	cbz	r1, 81230 <xTaskCheckForTimeOut+0x48>
	taskENTER_CRITICAL();
   811f2:	4b18      	ldr	r3, [pc, #96]	; (81254 <xTaskCheckForTimeOut+0x6c>)
   811f4:	4798      	blx	r3
			if( *pxTicksToWait == portMAX_DELAY )
   811f6:	682b      	ldr	r3, [r5, #0]
   811f8:	f1b3 3fff 	cmp.w	r3, #4294967295
   811fc:	d026      	beq.n	8124c <xTaskCheckForTimeOut+0x64>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   811fe:	4a16      	ldr	r2, [pc, #88]	; (81258 <xTaskCheckForTimeOut+0x70>)
   81200:	6812      	ldr	r2, [r2, #0]
   81202:	6821      	ldr	r1, [r4, #0]
   81204:	4291      	cmp	r1, r2
   81206:	d004      	beq.n	81212 <xTaskCheckForTimeOut+0x2a>
   81208:	4a14      	ldr	r2, [pc, #80]	; (8125c <xTaskCheckForTimeOut+0x74>)
   8120a:	6812      	ldr	r2, [r2, #0]
   8120c:	6861      	ldr	r1, [r4, #4]
   8120e:	4291      	cmp	r1, r2
   81210:	d91e      	bls.n	81250 <xTaskCheckForTimeOut+0x68>
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   81212:	4a12      	ldr	r2, [pc, #72]	; (8125c <xTaskCheckForTimeOut+0x74>)
   81214:	6812      	ldr	r2, [r2, #0]
   81216:	6861      	ldr	r1, [r4, #4]
   81218:	1a52      	subs	r2, r2, r1
   8121a:	4293      	cmp	r3, r2
   8121c:	d80c      	bhi.n	81238 <xTaskCheckForTimeOut+0x50>
			xReturn = pdTRUE;
   8121e:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
   81220:	4b0f      	ldr	r3, [pc, #60]	; (81260 <xTaskCheckForTimeOut+0x78>)
   81222:	4798      	blx	r3
}
   81224:	4620      	mov	r0, r4
   81226:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxTimeOut );
   81228:	4b0e      	ldr	r3, [pc, #56]	; (81264 <xTaskCheckForTimeOut+0x7c>)
   8122a:	4798      	blx	r3
   8122c:	bf00      	nop
   8122e:	e7fd      	b.n	8122c <xTaskCheckForTimeOut+0x44>
	configASSERT( pxTicksToWait );
   81230:	4b0c      	ldr	r3, [pc, #48]	; (81264 <xTaskCheckForTimeOut+0x7c>)
   81232:	4798      	blx	r3
   81234:	bf00      	nop
   81236:	e7fd      	b.n	81234 <xTaskCheckForTimeOut+0x4c>
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   81238:	4a08      	ldr	r2, [pc, #32]	; (8125c <xTaskCheckForTimeOut+0x74>)
   8123a:	6812      	ldr	r2, [r2, #0]
   8123c:	1a52      	subs	r2, r2, r1
   8123e:	1a9b      	subs	r3, r3, r2
   81240:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   81242:	4620      	mov	r0, r4
   81244:	4b08      	ldr	r3, [pc, #32]	; (81268 <xTaskCheckForTimeOut+0x80>)
   81246:	4798      	blx	r3
			xReturn = pdFALSE;
   81248:	2400      	movs	r4, #0
   8124a:	e7e9      	b.n	81220 <xTaskCheckForTimeOut+0x38>
				xReturn = pdFALSE;
   8124c:	2400      	movs	r4, #0
   8124e:	e7e7      	b.n	81220 <xTaskCheckForTimeOut+0x38>
			xReturn = pdTRUE;
   81250:	2401      	movs	r4, #1
   81252:	e7e5      	b.n	81220 <xTaskCheckForTimeOut+0x38>
   81254:	00080269 	.word	0x00080269
   81258:	2007a658 	.word	0x2007a658
   8125c:	2007a69c 	.word	0x2007a69c
   81260:	00080289 	.word	0x00080289
   81264:	00080259 	.word	0x00080259
   81268:	000811c1 	.word	0x000811c1

0008126c <vTaskMissedYield>:
	xMissedYield = pdTRUE;
   8126c:	2201      	movs	r2, #1
   8126e:	4b01      	ldr	r3, [pc, #4]	; (81274 <vTaskMissedYield+0x8>)
   81270:	601a      	str	r2, [r3, #0]
   81272:	4770      	bx	lr
   81274:	2007a654 	.word	0x2007a654

00081278 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   81278:	4b01      	ldr	r3, [pc, #4]	; (81280 <xTaskGetCurrentTaskHandle+0x8>)
   8127a:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
   8127c:	4770      	bx	lr
   8127e:	bf00      	nop
   81280:	2007a5a0 	.word	0x2007a5a0

00081284 <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
   81284:	4b05      	ldr	r3, [pc, #20]	; (8129c <xTaskGetSchedulerState+0x18>)
   81286:	681b      	ldr	r3, [r3, #0]
   81288:	b133      	cbz	r3, 81298 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   8128a:	4b05      	ldr	r3, [pc, #20]	; (812a0 <xTaskGetSchedulerState+0x1c>)
   8128c:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   8128e:	2b00      	cmp	r3, #0
   81290:	bf0c      	ite	eq
   81292:	2001      	moveq	r0, #1
   81294:	2002      	movne	r0, #2
   81296:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
   81298:	2000      	movs	r0, #0
			}
		}

		return xReturn;
	}
   8129a:	4770      	bx	lr
   8129c:	2007a670 	.word	0x2007a670
   812a0:	2007a618 	.word	0x2007a618

000812a4 <vTaskPriorityInherit>:
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   812a4:	2800      	cmp	r0, #0
   812a6:	d031      	beq.n	8130c <vTaskPriorityInherit+0x68>
	{
   812a8:	b538      	push	{r3, r4, r5, lr}
   812aa:	4605      	mov	r5, r0
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   812ac:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   812ae:	4918      	ldr	r1, [pc, #96]	; (81310 <vTaskPriorityInherit+0x6c>)
   812b0:	6809      	ldr	r1, [r1, #0]
   812b2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   812b4:	428b      	cmp	r3, r1
   812b6:	d211      	bcs.n	812dc <vTaskPriorityInherit+0x38>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   812b8:	4915      	ldr	r1, [pc, #84]	; (81310 <vTaskPriorityInherit+0x6c>)
   812ba:	6809      	ldr	r1, [r1, #0]
   812bc:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   812be:	f1c1 0105 	rsb	r1, r1, #5
   812c2:	6181      	str	r1, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   812c4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   812c8:	4912      	ldr	r1, [pc, #72]	; (81314 <vTaskPriorityInherit+0x70>)
   812ca:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   812ce:	6941      	ldr	r1, [r0, #20]
   812d0:	4299      	cmp	r1, r3
   812d2:	d004      	beq.n	812de <vTaskPriorityInherit+0x3a>
					prvAddTaskToReadyQueue( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   812d4:	4b0e      	ldr	r3, [pc, #56]	; (81310 <vTaskPriorityInherit+0x6c>)
   812d6:	681b      	ldr	r3, [r3, #0]
   812d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   812da:	62c3      	str	r3, [r0, #44]	; 0x2c
   812dc:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   812de:	1d04      	adds	r4, r0, #4
   812e0:	4620      	mov	r0, r4
   812e2:	4b0d      	ldr	r3, [pc, #52]	; (81318 <vTaskPriorityInherit+0x74>)
   812e4:	4798      	blx	r3
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   812e6:	4b0a      	ldr	r3, [pc, #40]	; (81310 <vTaskPriorityInherit+0x6c>)
   812e8:	681b      	ldr	r3, [r3, #0]
   812ea:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   812ec:	62e8      	str	r0, [r5, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
   812ee:	4b0b      	ldr	r3, [pc, #44]	; (8131c <vTaskPriorityInherit+0x78>)
   812f0:	681b      	ldr	r3, [r3, #0]
   812f2:	4298      	cmp	r0, r3
   812f4:	bf84      	itt	hi
   812f6:	4b09      	ldrhi	r3, [pc, #36]	; (8131c <vTaskPriorityInherit+0x78>)
   812f8:	6018      	strhi	r0, [r3, #0]
   812fa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   812fe:	4621      	mov	r1, r4
   81300:	4b04      	ldr	r3, [pc, #16]	; (81314 <vTaskPriorityInherit+0x70>)
   81302:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81306:	4b06      	ldr	r3, [pc, #24]	; (81320 <vTaskPriorityInherit+0x7c>)
   81308:	4798      	blx	r3
   8130a:	bd38      	pop	{r3, r4, r5, pc}
   8130c:	4770      	bx	lr
   8130e:	bf00      	nop
   81310:	2007a5a0 	.word	0x2007a5a0
   81314:	2007a5ac 	.word	0x2007a5ac
   81318:	000801d3 	.word	0x000801d3
   8131c:	2007a624 	.word	0x2007a624
   81320:	0008017d 	.word	0x0008017d

00081324 <vTaskPriorityDisinherit>:

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   81324:	b1e8      	cbz	r0, 81362 <vTaskPriorityDisinherit+0x3e>
	{
   81326:	b538      	push	{r3, r4, r5, lr}
   81328:	4604      	mov	r4, r0
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   8132a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   8132c:	6c82      	ldr	r2, [r0, #72]	; 0x48
   8132e:	4291      	cmp	r1, r2
   81330:	d016      	beq.n	81360 <vTaskPriorityDisinherit+0x3c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   81332:	1d05      	adds	r5, r0, #4
   81334:	4628      	mov	r0, r5
   81336:	4b0b      	ldr	r3, [pc, #44]	; (81364 <vTaskPriorityDisinherit+0x40>)
   81338:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   8133a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   8133c:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   8133e:	f1c0 0305 	rsb	r3, r0, #5
   81342:	61a3      	str	r3, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   81344:	4b08      	ldr	r3, [pc, #32]	; (81368 <vTaskPriorityDisinherit+0x44>)
   81346:	681b      	ldr	r3, [r3, #0]
   81348:	4298      	cmp	r0, r3
   8134a:	bf84      	itt	hi
   8134c:	4b06      	ldrhi	r3, [pc, #24]	; (81368 <vTaskPriorityDisinherit+0x44>)
   8134e:	6018      	strhi	r0, [r3, #0]
   81350:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81354:	4629      	mov	r1, r5
   81356:	4b05      	ldr	r3, [pc, #20]	; (8136c <vTaskPriorityDisinherit+0x48>)
   81358:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   8135c:	4b04      	ldr	r3, [pc, #16]	; (81370 <vTaskPriorityDisinherit+0x4c>)
   8135e:	4798      	blx	r3
   81360:	bd38      	pop	{r3, r4, r5, pc}
   81362:	4770      	bx	lr
   81364:	000801d3 	.word	0x000801d3
   81368:	2007a624 	.word	0x2007a624
   8136c:	2007a5ac 	.word	0x2007a5ac
   81370:	0008017d 	.word	0x0008017d

00081374 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
   81374:	b508      	push	{r3, lr}
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   81376:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81378:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
   8137a:	4291      	cmp	r1, r2
   8137c:	d80c      	bhi.n	81398 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
   8137e:	1ad2      	subs	r2, r2, r3
   81380:	6983      	ldr	r3, [r0, #24]
   81382:	429a      	cmp	r2, r3
   81384:	d301      	bcc.n	8138a <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   81386:	2001      	movs	r0, #1
   81388:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   8138a:	1d01      	adds	r1, r0, #4
   8138c:	4b09      	ldr	r3, [pc, #36]	; (813b4 <prvInsertTimerInActiveList+0x40>)
   8138e:	6818      	ldr	r0, [r3, #0]
   81390:	4b09      	ldr	r3, [pc, #36]	; (813b8 <prvInsertTimerInActiveList+0x44>)
   81392:	4798      	blx	r3
portBASE_TYPE xProcessTimerNow = pdFALSE;
   81394:	2000      	movs	r0, #0
   81396:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   81398:	429a      	cmp	r2, r3
   8139a:	d201      	bcs.n	813a0 <prvInsertTimerInActiveList+0x2c>
   8139c:	4299      	cmp	r1, r3
   8139e:	d206      	bcs.n	813ae <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   813a0:	1d01      	adds	r1, r0, #4
   813a2:	4b06      	ldr	r3, [pc, #24]	; (813bc <prvInsertTimerInActiveList+0x48>)
   813a4:	6818      	ldr	r0, [r3, #0]
   813a6:	4b04      	ldr	r3, [pc, #16]	; (813b8 <prvInsertTimerInActiveList+0x44>)
   813a8:	4798      	blx	r3
portBASE_TYPE xProcessTimerNow = pdFALSE;
   813aa:	2000      	movs	r0, #0
   813ac:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
   813ae:	2001      	movs	r0, #1
		}
	}

	return xProcessTimerNow;
}
   813b0:	bd08      	pop	{r3, pc}
   813b2:	bf00      	nop
   813b4:	2007a6a4 	.word	0x2007a6a4
   813b8:	00080199 	.word	0x00080199
   813bc:	2007a6a0 	.word	0x2007a6a0

000813c0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   813c0:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   813c2:	4b0d      	ldr	r3, [pc, #52]	; (813f8 <prvCheckForValidListAndQueue+0x38>)
   813c4:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   813c6:	4b0d      	ldr	r3, [pc, #52]	; (813fc <prvCheckForValidListAndQueue+0x3c>)
   813c8:	681b      	ldr	r3, [r3, #0]
   813ca:	b113      	cbz	r3, 813d2 <prvCheckForValidListAndQueue+0x12>
			pxCurrentTimerList = &xActiveTimerList1;
			pxOverflowTimerList = &xActiveTimerList2;
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
		}
	}
	taskEXIT_CRITICAL();
   813cc:	4b0c      	ldr	r3, [pc, #48]	; (81400 <prvCheckForValidListAndQueue+0x40>)
   813ce:	4798      	blx	r3
   813d0:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
   813d2:	4d0c      	ldr	r5, [pc, #48]	; (81404 <prvCheckForValidListAndQueue+0x44>)
   813d4:	4628      	mov	r0, r5
   813d6:	4e0c      	ldr	r6, [pc, #48]	; (81408 <prvCheckForValidListAndQueue+0x48>)
   813d8:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   813da:	4c0c      	ldr	r4, [pc, #48]	; (8140c <prvCheckForValidListAndQueue+0x4c>)
   813dc:	4620      	mov	r0, r4
   813de:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   813e0:	4b0b      	ldr	r3, [pc, #44]	; (81410 <prvCheckForValidListAndQueue+0x50>)
   813e2:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   813e4:	4b0b      	ldr	r3, [pc, #44]	; (81414 <prvCheckForValidListAndQueue+0x54>)
   813e6:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
   813e8:	2200      	movs	r2, #0
   813ea:	210c      	movs	r1, #12
   813ec:	2005      	movs	r0, #5
   813ee:	4b0a      	ldr	r3, [pc, #40]	; (81418 <prvCheckForValidListAndQueue+0x58>)
   813f0:	4798      	blx	r3
   813f2:	4b02      	ldr	r3, [pc, #8]	; (813fc <prvCheckForValidListAndQueue+0x3c>)
   813f4:	6018      	str	r0, [r3, #0]
   813f6:	e7e9      	b.n	813cc <prvCheckForValidListAndQueue+0xc>
   813f8:	00080269 	.word	0x00080269
   813fc:	2007a6d4 	.word	0x2007a6d4
   81400:	00080289 	.word	0x00080289
   81404:	2007a6a8 	.word	0x2007a6a8
   81408:	00080161 	.word	0x00080161
   8140c:	2007a6bc 	.word	0x2007a6bc
   81410:	2007a6a0 	.word	0x2007a6a0
   81414:	2007a6a4 	.word	0x2007a6a4
   81418:	00080661 	.word	0x00080661

0008141c <xTimerCreateTimerTask>:
{
   8141c:	b510      	push	{r4, lr}
   8141e:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
   81420:	4b0b      	ldr	r3, [pc, #44]	; (81450 <xTimerCreateTimerTask+0x34>)
   81422:	4798      	blx	r3
	if( xTimerQueue != NULL )
   81424:	4b0b      	ldr	r3, [pc, #44]	; (81454 <xTimerCreateTimerTask+0x38>)
   81426:	681b      	ldr	r3, [r3, #0]
   81428:	b173      	cbz	r3, 81448 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   8142a:	2300      	movs	r3, #0
   8142c:	9303      	str	r3, [sp, #12]
   8142e:	9302      	str	r3, [sp, #8]
   81430:	9301      	str	r3, [sp, #4]
   81432:	2204      	movs	r2, #4
   81434:	9200      	str	r2, [sp, #0]
   81436:	f44f 7282 	mov.w	r2, #260	; 0x104
   8143a:	4907      	ldr	r1, [pc, #28]	; (81458 <xTimerCreateTimerTask+0x3c>)
   8143c:	4807      	ldr	r0, [pc, #28]	; (8145c <xTimerCreateTimerTask+0x40>)
   8143e:	4c08      	ldr	r4, [pc, #32]	; (81460 <xTimerCreateTimerTask+0x44>)
   81440:	47a0      	blx	r4
	configASSERT( xReturn );
   81442:	b108      	cbz	r0, 81448 <xTimerCreateTimerTask+0x2c>
}
   81444:	b004      	add	sp, #16
   81446:	bd10      	pop	{r4, pc}
	configASSERT( xReturn );
   81448:	4b06      	ldr	r3, [pc, #24]	; (81464 <xTimerCreateTimerTask+0x48>)
   8144a:	4798      	blx	r3
   8144c:	bf00      	nop
   8144e:	e7fd      	b.n	8144c <xTimerCreateTimerTask+0x30>
   81450:	000813c1 	.word	0x000813c1
   81454:	2007a6d4 	.word	0x2007a6d4
   81458:	00082330 	.word	0x00082330
   8145c:	0008156d 	.word	0x0008156d
   81460:	00080aad 	.word	0x00080aad
   81464:	00080259 	.word	0x00080259

00081468 <xTimerGenericCommand>:
{
   81468:	b530      	push	{r4, r5, lr}
   8146a:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
   8146c:	4c0f      	ldr	r4, [pc, #60]	; (814ac <xTimerGenericCommand+0x44>)
   8146e:	6825      	ldr	r5, [r4, #0]
   81470:	b1d5      	cbz	r5, 814a8 <xTimerGenericCommand+0x40>
   81472:	461c      	mov	r4, r3
		xMessage.xMessageID = xCommandID;
   81474:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
   81476:	9202      	str	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
   81478:	9003      	str	r0, [sp, #12]
		if( pxHigherPriorityTaskWoken == NULL )
   8147a:	b13b      	cbz	r3, 8148c <xTimerGenericCommand+0x24>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   8147c:	2300      	movs	r3, #0
   8147e:	4622      	mov	r2, r4
   81480:	a901      	add	r1, sp, #4
   81482:	4628      	mov	r0, r5
   81484:	4c0a      	ldr	r4, [pc, #40]	; (814b0 <xTimerGenericCommand+0x48>)
   81486:	47a0      	blx	r4
}
   81488:	b005      	add	sp, #20
   8148a:	bd30      	pop	{r4, r5, pc}
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   8148c:	4b09      	ldr	r3, [pc, #36]	; (814b4 <xTimerGenericCommand+0x4c>)
   8148e:	4798      	blx	r3
   81490:	2801      	cmp	r0, #1
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
   81492:	f04f 0300 	mov.w	r3, #0
   81496:	bf0c      	ite	eq
   81498:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   8149a:	461a      	movne	r2, r3
   8149c:	a901      	add	r1, sp, #4
   8149e:	4803      	ldr	r0, [pc, #12]	; (814ac <xTimerGenericCommand+0x44>)
   814a0:	6800      	ldr	r0, [r0, #0]
   814a2:	4c05      	ldr	r4, [pc, #20]	; (814b8 <xTimerGenericCommand+0x50>)
   814a4:	47a0      	blx	r4
   814a6:	e7ef      	b.n	81488 <xTimerGenericCommand+0x20>
portBASE_TYPE xReturn = pdFAIL;
   814a8:	2000      	movs	r0, #0
	return xReturn;
   814aa:	e7ed      	b.n	81488 <xTimerGenericCommand+0x20>
   814ac:	2007a6d4 	.word	0x2007a6d4
   814b0:	000807dd 	.word	0x000807dd
   814b4:	00081285 	.word	0x00081285
   814b8:	000806b5 	.word	0x000806b5

000814bc <prvSampleTimeNow>:
{
   814bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   814c0:	b082      	sub	sp, #8
   814c2:	4681      	mov	r9, r0
	xTimeNow = xTaskGetTickCount();
   814c4:	4b21      	ldr	r3, [pc, #132]	; (8154c <prvSampleTimeNow+0x90>)
   814c6:	4798      	blx	r3
   814c8:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
   814ca:	4b21      	ldr	r3, [pc, #132]	; (81550 <prvSampleTimeNow+0x94>)
   814cc:	681b      	ldr	r3, [r3, #0]
   814ce:	4298      	cmp	r0, r3
   814d0:	d315      	bcc.n	814fe <prvSampleTimeNow+0x42>
		*pxTimerListsWereSwitched = pdFALSE;
   814d2:	2300      	movs	r3, #0
   814d4:	f8c9 3000 	str.w	r3, [r9]
	xLastTime = xTimeNow;
   814d8:	4b1d      	ldr	r3, [pc, #116]	; (81550 <prvSampleTimeNow+0x94>)
   814da:	f8c3 8000 	str.w	r8, [r3]
}
   814de:	4640      	mov	r0, r8
   814e0:	b002      	add	sp, #8
   814e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   814e6:	2100      	movs	r1, #0
   814e8:	9100      	str	r1, [sp, #0]
   814ea:	460b      	mov	r3, r1
   814ec:	4652      	mov	r2, sl
   814ee:	4620      	mov	r0, r4
   814f0:	4c18      	ldr	r4, [pc, #96]	; (81554 <prvSampleTimeNow+0x98>)
   814f2:	47a0      	blx	r4
				configASSERT( xResult );
   814f4:	b928      	cbnz	r0, 81502 <prvSampleTimeNow+0x46>
   814f6:	4b18      	ldr	r3, [pc, #96]	; (81558 <prvSampleTimeNow+0x9c>)
   814f8:	4798      	blx	r3
   814fa:	bf00      	nop
   814fc:	e7fd      	b.n	814fa <prvSampleTimeNow+0x3e>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   814fe:	4e17      	ldr	r6, [pc, #92]	; (8155c <prvSampleTimeNow+0xa0>)
		uxListRemove( &( pxTimer->xTimerListItem ) );
   81500:	4f17      	ldr	r7, [pc, #92]	; (81560 <prvSampleTimeNow+0xa4>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   81502:	6833      	ldr	r3, [r6, #0]
   81504:	681a      	ldr	r2, [r3, #0]
   81506:	b1c2      	cbz	r2, 8153a <prvSampleTimeNow+0x7e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   81508:	68da      	ldr	r2, [r3, #12]
   8150a:	f8d2 a000 	ldr.w	sl, [r2]
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   8150e:	68db      	ldr	r3, [r3, #12]
   81510:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
   81512:	1d25      	adds	r5, r4, #4
   81514:	4628      	mov	r0, r5
   81516:	47b8      	blx	r7
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81518:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8151a:	4620      	mov	r0, r4
   8151c:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   8151e:	69e3      	ldr	r3, [r4, #28]
   81520:	2b01      	cmp	r3, #1
   81522:	d1ee      	bne.n	81502 <prvSampleTimeNow+0x46>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   81524:	69a3      	ldr	r3, [r4, #24]
   81526:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
   81528:	459a      	cmp	sl, r3
   8152a:	d2dc      	bcs.n	814e6 <prvSampleTimeNow+0x2a>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   8152c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   8152e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81530:	4629      	mov	r1, r5
   81532:	6830      	ldr	r0, [r6, #0]
   81534:	4b0b      	ldr	r3, [pc, #44]	; (81564 <prvSampleTimeNow+0xa8>)
   81536:	4798      	blx	r3
   81538:	e7e3      	b.n	81502 <prvSampleTimeNow+0x46>
	pxCurrentTimerList = pxOverflowTimerList;
   8153a:	4a0b      	ldr	r2, [pc, #44]	; (81568 <prvSampleTimeNow+0xac>)
   8153c:	6810      	ldr	r0, [r2, #0]
   8153e:	4907      	ldr	r1, [pc, #28]	; (8155c <prvSampleTimeNow+0xa0>)
   81540:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
   81542:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
   81544:	2301      	movs	r3, #1
   81546:	f8c9 3000 	str.w	r3, [r9]
   8154a:	e7c5      	b.n	814d8 <prvSampleTimeNow+0x1c>
   8154c:	00080d29 	.word	0x00080d29
   81550:	2007a6d0 	.word	0x2007a6d0
   81554:	00081469 	.word	0x00081469
   81558:	00080259 	.word	0x00080259
   8155c:	2007a6a0 	.word	0x2007a6a0
   81560:	000801d3 	.word	0x000801d3
   81564:	00080199 	.word	0x00080199
   81568:	2007a6a4 	.word	0x2007a6a4

0008156c <prvTimerTask>:
{
   8156c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81570:	b086      	sub	sp, #24
	uxListRemove( &( pxTimer->xTimerListItem ) );
   81572:	f8df 8168 	ldr.w	r8, [pc, #360]	; 816dc <prvTimerTask+0x170>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   81576:	4b4d      	ldr	r3, [pc, #308]	; (816ac <prvTimerTask+0x140>)
   81578:	681b      	ldr	r3, [r3, #0]
   8157a:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   8157c:	2a00      	cmp	r2, #0
   8157e:	f000 8089 	beq.w	81694 <prvTimerTask+0x128>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   81582:	68db      	ldr	r3, [r3, #12]
   81584:	681d      	ldr	r5, [r3, #0]
	vTaskSuspendAll();
   81586:	4b4a      	ldr	r3, [pc, #296]	; (816b0 <prvTimerTask+0x144>)
   81588:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   8158a:	a803      	add	r0, sp, #12
   8158c:	4b49      	ldr	r3, [pc, #292]	; (816b4 <prvTimerTask+0x148>)
   8158e:	4798      	blx	r3
   81590:	4606      	mov	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
   81592:	9b03      	ldr	r3, [sp, #12]
   81594:	2b00      	cmp	r3, #0
   81596:	f040 8086 	bne.w	816a6 <prvTimerTask+0x13a>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   8159a:	42a8      	cmp	r0, r5
   8159c:	d20f      	bcs.n	815be <prvTimerTask+0x52>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   8159e:	1ba9      	subs	r1, r5, r6
   815a0:	4b45      	ldr	r3, [pc, #276]	; (816b8 <prvTimerTask+0x14c>)
   815a2:	6818      	ldr	r0, [r3, #0]
   815a4:	4b45      	ldr	r3, [pc, #276]	; (816bc <prvTimerTask+0x150>)
   815a6:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   815a8:	4b45      	ldr	r3, [pc, #276]	; (816c0 <prvTimerTask+0x154>)
   815aa:	4798      	blx	r3
   815ac:	b908      	cbnz	r0, 815b2 <prvTimerTask+0x46>
					portYIELD_WITHIN_API();
   815ae:	4b45      	ldr	r3, [pc, #276]	; (816c4 <prvTimerTask+0x158>)
   815b0:	4798      	blx	r3
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   815b2:	a802      	add	r0, sp, #8
   815b4:	4b3f      	ldr	r3, [pc, #252]	; (816b4 <prvTimerTask+0x148>)
   815b6:	4798      	blx	r3
   815b8:	4607      	mov	r7, r0
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   815ba:	4e3f      	ldr	r6, [pc, #252]	; (816b8 <prvTimerTask+0x14c>)
   815bc:	e036      	b.n	8162c <prvTimerTask+0xc0>
				xTaskResumeAll();
   815be:	4b40      	ldr	r3, [pc, #256]	; (816c0 <prvTimerTask+0x154>)
   815c0:	4798      	blx	r3
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   815c2:	4b3a      	ldr	r3, [pc, #232]	; (816ac <prvTimerTask+0x140>)
   815c4:	681b      	ldr	r3, [r3, #0]
   815c6:	68db      	ldr	r3, [r3, #12]
   815c8:	68dc      	ldr	r4, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
   815ca:	1d20      	adds	r0, r4, #4
   815cc:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   815ce:	69e3      	ldr	r3, [r4, #28]
   815d0:	2b01      	cmp	r3, #1
   815d2:	d114      	bne.n	815fe <prvTimerTask+0x92>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   815d4:	69a1      	ldr	r1, [r4, #24]
   815d6:	462b      	mov	r3, r5
   815d8:	4632      	mov	r2, r6
   815da:	4429      	add	r1, r5
   815dc:	4620      	mov	r0, r4
   815de:	4e3a      	ldr	r6, [pc, #232]	; (816c8 <prvTimerTask+0x15c>)
   815e0:	47b0      	blx	r6
   815e2:	2801      	cmp	r0, #1
   815e4:	d10b      	bne.n	815fe <prvTimerTask+0x92>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   815e6:	2100      	movs	r1, #0
   815e8:	9100      	str	r1, [sp, #0]
   815ea:	460b      	mov	r3, r1
   815ec:	462a      	mov	r2, r5
   815ee:	4620      	mov	r0, r4
   815f0:	4d36      	ldr	r5, [pc, #216]	; (816cc <prvTimerTask+0x160>)
   815f2:	47a8      	blx	r5
			configASSERT( xResult );
   815f4:	b918      	cbnz	r0, 815fe <prvTimerTask+0x92>
   815f6:	4b36      	ldr	r3, [pc, #216]	; (816d0 <prvTimerTask+0x164>)
   815f8:	4798      	blx	r3
   815fa:	bf00      	nop
   815fc:	e7fd      	b.n	815fa <prvTimerTask+0x8e>
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   815fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81600:	4620      	mov	r0, r4
   81602:	4798      	blx	r3
   81604:	e7d5      	b.n	815b2 <prvTimerTask+0x46>
		xNextExpireTime = ( portTickType ) 0U;
   81606:	2500      	movs	r5, #0
   81608:	e7c9      	b.n	8159e <prvTimerTask+0x32>
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
   8160a:	9904      	ldr	r1, [sp, #16]
   8160c:	61a1      	str	r1, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   8160e:	b131      	cbz	r1, 8161e <prvTimerTask+0xb2>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   81610:	463b      	mov	r3, r7
   81612:	463a      	mov	r2, r7
   81614:	4439      	add	r1, r7
   81616:	4620      	mov	r0, r4
   81618:	4c2b      	ldr	r4, [pc, #172]	; (816c8 <prvTimerTask+0x15c>)
   8161a:	47a0      	blx	r4
   8161c:	e006      	b.n	8162c <prvTimerTask+0xc0>
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   8161e:	4b2c      	ldr	r3, [pc, #176]	; (816d0 <prvTimerTask+0x164>)
   81620:	4798      	blx	r3
   81622:	bf00      	nop
   81624:	e7fd      	b.n	81622 <prvTimerTask+0xb6>
				vPortFree( pxTimer );
   81626:	4620      	mov	r0, r4
   81628:	4b2a      	ldr	r3, [pc, #168]	; (816d4 <prvTimerTask+0x168>)
   8162a:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   8162c:	4d2a      	ldr	r5, [pc, #168]	; (816d8 <prvTimerTask+0x16c>)
   8162e:	2300      	movs	r3, #0
   81630:	461a      	mov	r2, r3
   81632:	a903      	add	r1, sp, #12
   81634:	6830      	ldr	r0, [r6, #0]
   81636:	47a8      	blx	r5
   81638:	2800      	cmp	r0, #0
   8163a:	d09c      	beq.n	81576 <prvTimerTask+0xa>
		pxTimer = xMessage.pxTimer;
   8163c:	9c05      	ldr	r4, [sp, #20]
		if( pxTimer != NULL )
   8163e:	b11c      	cbz	r4, 81648 <prvTimerTask+0xdc>
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   81640:	6963      	ldr	r3, [r4, #20]
   81642:	b10b      	cbz	r3, 81648 <prvTimerTask+0xdc>
				uxListRemove( &( pxTimer->xTimerListItem ) );
   81644:	1d20      	adds	r0, r4, #4
   81646:	47c0      	blx	r8
		switch( xMessage.xMessageID )
   81648:	9b03      	ldr	r3, [sp, #12]
   8164a:	2b02      	cmp	r3, #2
   8164c:	d0dd      	beq.n	8160a <prvTimerTask+0x9e>
   8164e:	2b03      	cmp	r3, #3
   81650:	d0e9      	beq.n	81626 <prvTimerTask+0xba>
   81652:	2b00      	cmp	r3, #0
   81654:	d1eb      	bne.n	8162e <prvTimerTask+0xc2>
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
   81656:	9904      	ldr	r1, [sp, #16]
   81658:	69a0      	ldr	r0, [r4, #24]
   8165a:	460b      	mov	r3, r1
   8165c:	463a      	mov	r2, r7
   8165e:	4401      	add	r1, r0
   81660:	4620      	mov	r0, r4
   81662:	4d19      	ldr	r5, [pc, #100]	; (816c8 <prvTimerTask+0x15c>)
   81664:	47a8      	blx	r5
   81666:	2801      	cmp	r0, #1
   81668:	d1e0      	bne.n	8162c <prvTimerTask+0xc0>
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   8166a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8166c:	4620      	mov	r0, r4
   8166e:	4798      	blx	r3
					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81670:	69e3      	ldr	r3, [r4, #28]
   81672:	2b01      	cmp	r3, #1
   81674:	d1da      	bne.n	8162c <prvTimerTask+0xc0>
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   81676:	69a2      	ldr	r2, [r4, #24]
   81678:	2100      	movs	r1, #0
   8167a:	9100      	str	r1, [sp, #0]
   8167c:	460b      	mov	r3, r1
   8167e:	9804      	ldr	r0, [sp, #16]
   81680:	4402      	add	r2, r0
   81682:	4620      	mov	r0, r4
   81684:	4c11      	ldr	r4, [pc, #68]	; (816cc <prvTimerTask+0x160>)
   81686:	47a0      	blx	r4
						configASSERT( xResult );
   81688:	2800      	cmp	r0, #0
   8168a:	d1cf      	bne.n	8162c <prvTimerTask+0xc0>
   8168c:	4b10      	ldr	r3, [pc, #64]	; (816d0 <prvTimerTask+0x164>)
   8168e:	4798      	blx	r3
   81690:	bf00      	nop
   81692:	e7fd      	b.n	81690 <prvTimerTask+0x124>
	vTaskSuspendAll();
   81694:	4b06      	ldr	r3, [pc, #24]	; (816b0 <prvTimerTask+0x144>)
   81696:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81698:	a803      	add	r0, sp, #12
   8169a:	4b06      	ldr	r3, [pc, #24]	; (816b4 <prvTimerTask+0x148>)
   8169c:	4798      	blx	r3
   8169e:	4606      	mov	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
   816a0:	9b03      	ldr	r3, [sp, #12]
   816a2:	2b00      	cmp	r3, #0
   816a4:	d0af      	beq.n	81606 <prvTimerTask+0x9a>
			xTaskResumeAll();
   816a6:	4b06      	ldr	r3, [pc, #24]	; (816c0 <prvTimerTask+0x154>)
   816a8:	4798      	blx	r3
   816aa:	e782      	b.n	815b2 <prvTimerTask+0x46>
   816ac:	2007a6a0 	.word	0x2007a6a0
   816b0:	00080d19 	.word	0x00080d19
   816b4:	000814bd 	.word	0x000814bd
   816b8:	2007a6d4 	.word	0x2007a6d4
   816bc:	00080a05 	.word	0x00080a05
   816c0:	00080e71 	.word	0x00080e71
   816c4:	00080249 	.word	0x00080249
   816c8:	00081375 	.word	0x00081375
   816cc:	00081469 	.word	0x00081469
   816d0:	00080259 	.word	0x00080259
   816d4:	00080485 	.word	0x00080485
   816d8:	0008086d 	.word	0x0008086d
   816dc:	000801d3 	.word	0x000801d3

000816e0 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   816e0:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   816e2:	480e      	ldr	r0, [pc, #56]	; (8171c <sysclk_init+0x3c>)
   816e4:	4b0e      	ldr	r3, [pc, #56]	; (81720 <sysclk_init+0x40>)
   816e6:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   816e8:	213e      	movs	r1, #62	; 0x3e
   816ea:	2000      	movs	r0, #0
   816ec:	4b0d      	ldr	r3, [pc, #52]	; (81724 <sysclk_init+0x44>)
   816ee:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   816f0:	4c0d      	ldr	r4, [pc, #52]	; (81728 <sysclk_init+0x48>)
   816f2:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   816f4:	2800      	cmp	r0, #0
   816f6:	d0fc      	beq.n	816f2 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   816f8:	4b0c      	ldr	r3, [pc, #48]	; (8172c <sysclk_init+0x4c>)
   816fa:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   816fc:	4a0c      	ldr	r2, [pc, #48]	; (81730 <sysclk_init+0x50>)
   816fe:	4b0d      	ldr	r3, [pc, #52]	; (81734 <sysclk_init+0x54>)
   81700:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   81702:	4c0d      	ldr	r4, [pc, #52]	; (81738 <sysclk_init+0x58>)
   81704:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   81706:	2800      	cmp	r0, #0
   81708:	d0fc      	beq.n	81704 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8170a:	2010      	movs	r0, #16
   8170c:	4b0b      	ldr	r3, [pc, #44]	; (8173c <sysclk_init+0x5c>)
   8170e:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   81710:	4b0b      	ldr	r3, [pc, #44]	; (81740 <sysclk_init+0x60>)
   81712:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   81714:	4801      	ldr	r0, [pc, #4]	; (8171c <sysclk_init+0x3c>)
   81716:	4b02      	ldr	r3, [pc, #8]	; (81720 <sysclk_init+0x40>)
   81718:	4798      	blx	r3
   8171a:	bd10      	pop	{r4, pc}
   8171c:	0501bd00 	.word	0x0501bd00
   81720:	200700b1 	.word	0x200700b1
   81724:	00081ad5 	.word	0x00081ad5
   81728:	00081b29 	.word	0x00081b29
   8172c:	00081b39 	.word	0x00081b39
   81730:	200d3f01 	.word	0x200d3f01
   81734:	400e0600 	.word	0x400e0600
   81738:	00081b49 	.word	0x00081b49
   8173c:	00081a71 	.word	0x00081a71
   81740:	00081c15 	.word	0x00081c15

00081744 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   81744:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   81746:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8174a:	4b16      	ldr	r3, [pc, #88]	; (817a4 <board_init+0x60>)
   8174c:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8174e:	200b      	movs	r0, #11
   81750:	4c15      	ldr	r4, [pc, #84]	; (817a8 <board_init+0x64>)
   81752:	47a0      	blx	r4
   81754:	200c      	movs	r0, #12
   81756:	47a0      	blx	r4
   81758:	200d      	movs	r0, #13
   8175a:	47a0      	blx	r4
   8175c:	200e      	movs	r0, #14
   8175e:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   81760:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81764:	203b      	movs	r0, #59	; 0x3b
   81766:	4c11      	ldr	r4, [pc, #68]	; (817ac <board_init+0x68>)
   81768:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   8176a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8176e:	2055      	movs	r0, #85	; 0x55
   81770:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   81772:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81776:	2056      	movs	r0, #86	; 0x56
   81778:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   8177a:	490d      	ldr	r1, [pc, #52]	; (817b0 <board_init+0x6c>)
   8177c:	2068      	movs	r0, #104	; 0x68
   8177e:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   81780:	490c      	ldr	r1, [pc, #48]	; (817b4 <board_init+0x70>)
   81782:	205c      	movs	r0, #92	; 0x5c
   81784:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   81786:	4a0c      	ldr	r2, [pc, #48]	; (817b8 <board_init+0x74>)
   81788:	f44f 7140 	mov.w	r1, #768	; 0x300
   8178c:	480b      	ldr	r0, [pc, #44]	; (817bc <board_init+0x78>)
   8178e:	4b0c      	ldr	r3, [pc, #48]	; (817c0 <board_init+0x7c>)
   81790:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   81792:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81796:	202b      	movs	r0, #43	; 0x2b
   81798:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   8179a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8179e:	202a      	movs	r0, #42	; 0x2a
   817a0:	47a0      	blx	r4
   817a2:	bd10      	pop	{r4, pc}
   817a4:	400e1a50 	.word	0x400e1a50
   817a8:	00081b59 	.word	0x00081b59
   817ac:	00081865 	.word	0x00081865
   817b0:	28000079 	.word	0x28000079
   817b4:	28000001 	.word	0x28000001
   817b8:	08000001 	.word	0x08000001
   817bc:	400e0e00 	.word	0x400e0e00
   817c0:	00081935 	.word	0x00081935

000817c4 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   817c4:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   817c6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   817ca:	d016      	beq.n	817fa <pio_set_peripheral+0x36>
   817cc:	d80b      	bhi.n	817e6 <pio_set_peripheral+0x22>
   817ce:	b149      	cbz	r1, 817e4 <pio_set_peripheral+0x20>
   817d0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   817d4:	d105      	bne.n	817e2 <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   817d6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   817d8:	6f01      	ldr	r1, [r0, #112]	; 0x70
   817da:	400b      	ands	r3, r1
   817dc:	ea23 0302 	bic.w	r3, r3, r2
   817e0:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   817e2:	6042      	str	r2, [r0, #4]
   817e4:	4770      	bx	lr
	switch (ul_type) {
   817e6:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   817ea:	d0fb      	beq.n	817e4 <pio_set_peripheral+0x20>
   817ec:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   817f0:	d0f8      	beq.n	817e4 <pio_set_peripheral+0x20>
   817f2:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   817f6:	d1f4      	bne.n	817e2 <pio_set_peripheral+0x1e>
   817f8:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   817fa:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   817fc:	4313      	orrs	r3, r2
   817fe:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   81800:	e7ef      	b.n	817e2 <pio_set_peripheral+0x1e>

00081802 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   81802:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   81804:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   81808:	bf14      	ite	ne
   8180a:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   8180c:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   8180e:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   81812:	bf14      	ite	ne
   81814:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   81816:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   81818:	f012 0f02 	tst.w	r2, #2
   8181c:	d107      	bne.n	8182e <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   8181e:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   81822:	bf18      	it	ne
   81824:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   81828:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   8182a:	6001      	str	r1, [r0, #0]
   8182c:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   8182e:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   81832:	e7f9      	b.n	81828 <pio_set_input+0x26>

00081834 <pio_set_output>:
{
   81834:	b410      	push	{r4}
   81836:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   81838:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   8183a:	b944      	cbnz	r4, 8184e <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   8183c:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   8183e:	b143      	cbz	r3, 81852 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   81840:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   81842:	b942      	cbnz	r2, 81856 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   81844:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   81846:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   81848:	6001      	str	r1, [r0, #0]
}
   8184a:	bc10      	pop	{r4}
   8184c:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   8184e:	6641      	str	r1, [r0, #100]	; 0x64
   81850:	e7f5      	b.n	8183e <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   81852:	6541      	str	r1, [r0, #84]	; 0x54
   81854:	e7f5      	b.n	81842 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   81856:	6301      	str	r1, [r0, #48]	; 0x30
   81858:	e7f5      	b.n	81846 <pio_set_output+0x12>

0008185a <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   8185a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   8185c:	4770      	bx	lr

0008185e <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   8185e:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   81860:	4770      	bx	lr
	...

00081864 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   81864:	b570      	push	{r4, r5, r6, lr}
   81866:	b082      	sub	sp, #8
   81868:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8186a:	0943      	lsrs	r3, r0, #5
   8186c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81870:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81874:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   81876:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   8187a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8187e:	d031      	beq.n	818e4 <pio_configure_pin+0x80>
   81880:	d816      	bhi.n	818b0 <pio_configure_pin+0x4c>
   81882:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81886:	d01b      	beq.n	818c0 <pio_configure_pin+0x5c>
   81888:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8188c:	d116      	bne.n	818bc <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   8188e:	f000 001f 	and.w	r0, r0, #31
   81892:	2601      	movs	r6, #1
   81894:	4086      	lsls	r6, r0
   81896:	4632      	mov	r2, r6
   81898:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8189c:	4620      	mov	r0, r4
   8189e:	4b22      	ldr	r3, [pc, #136]	; (81928 <pio_configure_pin+0xc4>)
   818a0:	4798      	blx	r3
	if (ul_pull_up_enable) {
   818a2:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   818a6:	bf14      	ite	ne
   818a8:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   818aa:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   818ac:	2001      	movs	r0, #1
   818ae:	e017      	b.n	818e0 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   818b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   818b4:	d021      	beq.n	818fa <pio_configure_pin+0x96>
   818b6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   818ba:	d01e      	beq.n	818fa <pio_configure_pin+0x96>
		return 0;
   818bc:	2000      	movs	r0, #0
   818be:	e00f      	b.n	818e0 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   818c0:	f000 001f 	and.w	r0, r0, #31
   818c4:	2601      	movs	r6, #1
   818c6:	4086      	lsls	r6, r0
   818c8:	4632      	mov	r2, r6
   818ca:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   818ce:	4620      	mov	r0, r4
   818d0:	4b15      	ldr	r3, [pc, #84]	; (81928 <pio_configure_pin+0xc4>)
   818d2:	4798      	blx	r3
	if (ul_pull_up_enable) {
   818d4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   818d8:	bf14      	ite	ne
   818da:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   818dc:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   818de:	2001      	movs	r0, #1
}
   818e0:	b002      	add	sp, #8
   818e2:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   818e4:	f000 011f 	and.w	r1, r0, #31
   818e8:	2601      	movs	r6, #1
   818ea:	462a      	mov	r2, r5
   818ec:	fa06 f101 	lsl.w	r1, r6, r1
   818f0:	4620      	mov	r0, r4
   818f2:	4b0e      	ldr	r3, [pc, #56]	; (8192c <pio_configure_pin+0xc8>)
   818f4:	4798      	blx	r3
	return 1;
   818f6:	4630      	mov	r0, r6
		break;
   818f8:	e7f2      	b.n	818e0 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   818fa:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   818fe:	f000 011f 	and.w	r1, r0, #31
   81902:	2601      	movs	r6, #1
   81904:	ea05 0306 	and.w	r3, r5, r6
   81908:	9300      	str	r3, [sp, #0]
   8190a:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8190e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   81912:	bf14      	ite	ne
   81914:	2200      	movne	r2, #0
   81916:	2201      	moveq	r2, #1
   81918:	fa06 f101 	lsl.w	r1, r6, r1
   8191c:	4620      	mov	r0, r4
   8191e:	4c04      	ldr	r4, [pc, #16]	; (81930 <pio_configure_pin+0xcc>)
   81920:	47a0      	blx	r4
	return 1;
   81922:	4630      	mov	r0, r6
		break;
   81924:	e7dc      	b.n	818e0 <pio_configure_pin+0x7c>
   81926:	bf00      	nop
   81928:	000817c5 	.word	0x000817c5
   8192c:	00081803 	.word	0x00081803
   81930:	00081835 	.word	0x00081835

00081934 <pio_configure_pin_group>:
{
   81934:	b570      	push	{r4, r5, r6, lr}
   81936:	b082      	sub	sp, #8
   81938:	4605      	mov	r5, r0
   8193a:	460e      	mov	r6, r1
   8193c:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   8193e:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   81942:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81946:	d027      	beq.n	81998 <pio_configure_pin_group+0x64>
   81948:	d811      	bhi.n	8196e <pio_configure_pin_group+0x3a>
   8194a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8194e:	d016      	beq.n	8197e <pio_configure_pin_group+0x4a>
   81950:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81954:	d111      	bne.n	8197a <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   81956:	460a      	mov	r2, r1
   81958:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8195c:	4b19      	ldr	r3, [pc, #100]	; (819c4 <pio_configure_pin_group+0x90>)
   8195e:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81960:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   81964:	bf14      	ite	ne
   81966:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81968:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   8196a:	2001      	movs	r0, #1
   8196c:	e012      	b.n	81994 <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   8196e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81972:	d015      	beq.n	819a0 <pio_configure_pin_group+0x6c>
   81974:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81978:	d012      	beq.n	819a0 <pio_configure_pin_group+0x6c>
		return 0;
   8197a:	2000      	movs	r0, #0
   8197c:	e00a      	b.n	81994 <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   8197e:	460a      	mov	r2, r1
   81980:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81984:	4b0f      	ldr	r3, [pc, #60]	; (819c4 <pio_configure_pin_group+0x90>)
   81986:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81988:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   8198c:	bf14      	ite	ne
   8198e:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81990:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   81992:	2001      	movs	r0, #1
}
   81994:	b002      	add	sp, #8
   81996:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   81998:	4b0b      	ldr	r3, [pc, #44]	; (819c8 <pio_configure_pin_group+0x94>)
   8199a:	4798      	blx	r3
	return 1;
   8199c:	2001      	movs	r0, #1
		break;
   8199e:	e7f9      	b.n	81994 <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   819a0:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   819a4:	f004 0301 	and.w	r3, r4, #1
   819a8:	9300      	str	r3, [sp, #0]
   819aa:	f3c4 0380 	ubfx	r3, r4, #2, #1
   819ae:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   819b2:	bf14      	ite	ne
   819b4:	2200      	movne	r2, #0
   819b6:	2201      	moveq	r2, #1
   819b8:	4631      	mov	r1, r6
   819ba:	4628      	mov	r0, r5
   819bc:	4c03      	ldr	r4, [pc, #12]	; (819cc <pio_configure_pin_group+0x98>)
   819be:	47a0      	blx	r4
	return 1;
   819c0:	2001      	movs	r0, #1
		break;
   819c2:	e7e7      	b.n	81994 <pio_configure_pin_group+0x60>
   819c4:	000817c5 	.word	0x000817c5
   819c8:	00081803 	.word	0x00081803
   819cc:	00081835 	.word	0x00081835

000819d0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   819d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   819d4:	4604      	mov	r4, r0
   819d6:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   819d8:	4b0e      	ldr	r3, [pc, #56]	; (81a14 <pio_handler_process+0x44>)
   819da:	4798      	blx	r3
   819dc:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   819de:	4620      	mov	r0, r4
   819e0:	4b0d      	ldr	r3, [pc, #52]	; (81a18 <pio_handler_process+0x48>)
   819e2:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   819e4:	4005      	ands	r5, r0
   819e6:	d013      	beq.n	81a10 <pio_handler_process+0x40>
   819e8:	4c0c      	ldr	r4, [pc, #48]	; (81a1c <pio_handler_process+0x4c>)
   819ea:	f104 0660 	add.w	r6, r4, #96	; 0x60
   819ee:	e003      	b.n	819f8 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   819f0:	42b4      	cmp	r4, r6
   819f2:	d00d      	beq.n	81a10 <pio_handler_process+0x40>
   819f4:	3410      	adds	r4, #16
		while (status != 0) {
   819f6:	b15d      	cbz	r5, 81a10 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   819f8:	6820      	ldr	r0, [r4, #0]
   819fa:	4540      	cmp	r0, r8
   819fc:	d1f8      	bne.n	819f0 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   819fe:	6861      	ldr	r1, [r4, #4]
   81a00:	4229      	tst	r1, r5
   81a02:	d0f5      	beq.n	819f0 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   81a04:	68e3      	ldr	r3, [r4, #12]
   81a06:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   81a08:	6863      	ldr	r3, [r4, #4]
   81a0a:	ea25 0503 	bic.w	r5, r5, r3
   81a0e:	e7ef      	b.n	819f0 <pio_handler_process+0x20>
   81a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81a14:	0008185b 	.word	0x0008185b
   81a18:	0008185f 	.word	0x0008185f
   81a1c:	2007a6d8 	.word	0x2007a6d8

00081a20 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   81a20:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   81a22:	210b      	movs	r1, #11
   81a24:	4801      	ldr	r0, [pc, #4]	; (81a2c <PIOA_Handler+0xc>)
   81a26:	4b02      	ldr	r3, [pc, #8]	; (81a30 <PIOA_Handler+0x10>)
   81a28:	4798      	blx	r3
   81a2a:	bd08      	pop	{r3, pc}
   81a2c:	400e0e00 	.word	0x400e0e00
   81a30:	000819d1 	.word	0x000819d1

00081a34 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   81a34:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   81a36:	210c      	movs	r1, #12
   81a38:	4801      	ldr	r0, [pc, #4]	; (81a40 <PIOB_Handler+0xc>)
   81a3a:	4b02      	ldr	r3, [pc, #8]	; (81a44 <PIOB_Handler+0x10>)
   81a3c:	4798      	blx	r3
   81a3e:	bd08      	pop	{r3, pc}
   81a40:	400e1000 	.word	0x400e1000
   81a44:	000819d1 	.word	0x000819d1

00081a48 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   81a48:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   81a4a:	210d      	movs	r1, #13
   81a4c:	4801      	ldr	r0, [pc, #4]	; (81a54 <PIOC_Handler+0xc>)
   81a4e:	4b02      	ldr	r3, [pc, #8]	; (81a58 <PIOC_Handler+0x10>)
   81a50:	4798      	blx	r3
   81a52:	bd08      	pop	{r3, pc}
   81a54:	400e1200 	.word	0x400e1200
   81a58:	000819d1 	.word	0x000819d1

00081a5c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   81a5c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   81a5e:	210e      	movs	r1, #14
   81a60:	4801      	ldr	r0, [pc, #4]	; (81a68 <PIOD_Handler+0xc>)
   81a62:	4b02      	ldr	r3, [pc, #8]	; (81a6c <PIOD_Handler+0x10>)
   81a64:	4798      	blx	r3
   81a66:	bd08      	pop	{r3, pc}
   81a68:	400e1400 	.word	0x400e1400
   81a6c:	000819d1 	.word	0x000819d1

00081a70 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   81a70:	4a17      	ldr	r2, [pc, #92]	; (81ad0 <pmc_switch_mck_to_pllack+0x60>)
   81a72:	6b13      	ldr	r3, [r2, #48]	; 0x30
   81a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   81a78:	4318      	orrs	r0, r3
   81a7a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81a7c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81a7e:	f013 0f08 	tst.w	r3, #8
   81a82:	d10a      	bne.n	81a9a <pmc_switch_mck_to_pllack+0x2a>
   81a84:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81a88:	4911      	ldr	r1, [pc, #68]	; (81ad0 <pmc_switch_mck_to_pllack+0x60>)
   81a8a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81a8c:	f012 0f08 	tst.w	r2, #8
   81a90:	d103      	bne.n	81a9a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81a92:	3b01      	subs	r3, #1
   81a94:	d1f9      	bne.n	81a8a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   81a96:	2001      	movs	r0, #1
   81a98:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   81a9a:	4a0d      	ldr	r2, [pc, #52]	; (81ad0 <pmc_switch_mck_to_pllack+0x60>)
   81a9c:	6b13      	ldr	r3, [r2, #48]	; 0x30
   81a9e:	f023 0303 	bic.w	r3, r3, #3
   81aa2:	f043 0302 	orr.w	r3, r3, #2
   81aa6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81aa8:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81aaa:	f013 0f08 	tst.w	r3, #8
   81aae:	d10a      	bne.n	81ac6 <pmc_switch_mck_to_pllack+0x56>
   81ab0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81ab4:	4906      	ldr	r1, [pc, #24]	; (81ad0 <pmc_switch_mck_to_pllack+0x60>)
   81ab6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81ab8:	f012 0f08 	tst.w	r2, #8
   81abc:	d105      	bne.n	81aca <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81abe:	3b01      	subs	r3, #1
   81ac0:	d1f9      	bne.n	81ab6 <pmc_switch_mck_to_pllack+0x46>
			return 1;
   81ac2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   81ac4:	4770      	bx	lr
	return 0;
   81ac6:	2000      	movs	r0, #0
   81ac8:	4770      	bx	lr
   81aca:	2000      	movs	r0, #0
   81acc:	4770      	bx	lr
   81ace:	bf00      	nop
   81ad0:	400e0600 	.word	0x400e0600

00081ad4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   81ad4:	b9c8      	cbnz	r0, 81b0a <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81ad6:	4a11      	ldr	r2, [pc, #68]	; (81b1c <pmc_switch_mainck_to_xtal+0x48>)
   81ad8:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   81ada:	0209      	lsls	r1, r1, #8
   81adc:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   81ade:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   81ae2:	f023 0303 	bic.w	r3, r3, #3
   81ae6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   81aea:	f043 0301 	orr.w	r3, r3, #1
   81aee:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81af0:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   81af2:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81af4:	f013 0f01 	tst.w	r3, #1
   81af8:	d0fb      	beq.n	81af2 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   81afa:	4a08      	ldr	r2, [pc, #32]	; (81b1c <pmc_switch_mainck_to_xtal+0x48>)
   81afc:	6a13      	ldr	r3, [r2, #32]
   81afe:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   81b02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   81b06:	6213      	str	r3, [r2, #32]
   81b08:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   81b0a:	4904      	ldr	r1, [pc, #16]	; (81b1c <pmc_switch_mainck_to_xtal+0x48>)
   81b0c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   81b0e:	4a04      	ldr	r2, [pc, #16]	; (81b20 <pmc_switch_mainck_to_xtal+0x4c>)
   81b10:	401a      	ands	r2, r3
   81b12:	4b04      	ldr	r3, [pc, #16]	; (81b24 <pmc_switch_mainck_to_xtal+0x50>)
   81b14:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   81b16:	620b      	str	r3, [r1, #32]
   81b18:	4770      	bx	lr
   81b1a:	bf00      	nop
   81b1c:	400e0600 	.word	0x400e0600
   81b20:	fec8fffc 	.word	0xfec8fffc
   81b24:	01370002 	.word	0x01370002

00081b28 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   81b28:	4b02      	ldr	r3, [pc, #8]	; (81b34 <pmc_osc_is_ready_mainck+0xc>)
   81b2a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81b2c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   81b30:	4770      	bx	lr
   81b32:	bf00      	nop
   81b34:	400e0600 	.word	0x400e0600

00081b38 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   81b38:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   81b3c:	4b01      	ldr	r3, [pc, #4]	; (81b44 <pmc_disable_pllack+0xc>)
   81b3e:	629a      	str	r2, [r3, #40]	; 0x28
   81b40:	4770      	bx	lr
   81b42:	bf00      	nop
   81b44:	400e0600 	.word	0x400e0600

00081b48 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   81b48:	4b02      	ldr	r3, [pc, #8]	; (81b54 <pmc_is_locked_pllack+0xc>)
   81b4a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81b4c:	f000 0002 	and.w	r0, r0, #2
   81b50:	4770      	bx	lr
   81b52:	bf00      	nop
   81b54:	400e0600 	.word	0x400e0600

00081b58 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
   81b58:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   81b5c:	4b05      	ldr	r3, [pc, #20]	; (81b74 <pmc_enable_periph_clk+0x1c>)
   81b5e:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
   81b62:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
   81b66:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
   81b6a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
   81b6e:	2000      	movs	r0, #0
   81b70:	4770      	bx	lr
   81b72:	bf00      	nop
   81b74:	400e0600 	.word	0x400e0600

00081b78 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   81b78:	e7fe      	b.n	81b78 <Dummy_Handler>
	...

00081b7c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   81b7c:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   81b7e:	4b1c      	ldr	r3, [pc, #112]	; (81bf0 <Reset_Handler+0x74>)
   81b80:	4a1c      	ldr	r2, [pc, #112]	; (81bf4 <Reset_Handler+0x78>)
   81b82:	429a      	cmp	r2, r3
   81b84:	d010      	beq.n	81ba8 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   81b86:	4b1c      	ldr	r3, [pc, #112]	; (81bf8 <Reset_Handler+0x7c>)
   81b88:	4a19      	ldr	r2, [pc, #100]	; (81bf0 <Reset_Handler+0x74>)
   81b8a:	429a      	cmp	r2, r3
   81b8c:	d20c      	bcs.n	81ba8 <Reset_Handler+0x2c>
   81b8e:	3b01      	subs	r3, #1
   81b90:	1a9b      	subs	r3, r3, r2
   81b92:	f023 0303 	bic.w	r3, r3, #3
   81b96:	3304      	adds	r3, #4
   81b98:	4413      	add	r3, r2
   81b9a:	4916      	ldr	r1, [pc, #88]	; (81bf4 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   81b9c:	f851 0b04 	ldr.w	r0, [r1], #4
   81ba0:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   81ba4:	429a      	cmp	r2, r3
   81ba6:	d1f9      	bne.n	81b9c <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81ba8:	4b14      	ldr	r3, [pc, #80]	; (81bfc <Reset_Handler+0x80>)
   81baa:	4a15      	ldr	r2, [pc, #84]	; (81c00 <Reset_Handler+0x84>)
   81bac:	429a      	cmp	r2, r3
   81bae:	d20a      	bcs.n	81bc6 <Reset_Handler+0x4a>
   81bb0:	3b01      	subs	r3, #1
   81bb2:	1a9b      	subs	r3, r3, r2
   81bb4:	f023 0303 	bic.w	r3, r3, #3
   81bb8:	3304      	adds	r3, #4
   81bba:	4413      	add	r3, r2
		*pDest++ = 0;
   81bbc:	2100      	movs	r1, #0
   81bbe:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   81bc2:	4293      	cmp	r3, r2
   81bc4:	d1fb      	bne.n	81bbe <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   81bc6:	4b0f      	ldr	r3, [pc, #60]	; (81c04 <Reset_Handler+0x88>)
   81bc8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   81bcc:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   81bd0:	490d      	ldr	r1, [pc, #52]	; (81c08 <Reset_Handler+0x8c>)
   81bd2:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   81bd4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   81bd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   81bdc:	d203      	bcs.n	81be6 <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   81bde:	688b      	ldr	r3, [r1, #8]
   81be0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   81be4:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   81be6:	4b09      	ldr	r3, [pc, #36]	; (81c0c <Reset_Handler+0x90>)
   81be8:	4798      	blx	r3

	/* Branch to main function */
	main();
   81bea:	4b09      	ldr	r3, [pc, #36]	; (81c10 <Reset_Handler+0x94>)
   81bec:	4798      	blx	r3
   81bee:	e7fe      	b.n	81bee <Reset_Handler+0x72>
   81bf0:	20070000 	.word	0x20070000
   81bf4:	0008239c 	.word	0x0008239c
   81bf8:	20070574 	.word	0x20070574
   81bfc:	2007a7d4 	.word	0x2007a7d4
   81c00:	20070578 	.word	0x20070578
   81c04:	00080000 	.word	0x00080000
   81c08:	e000ed00 	.word	0xe000ed00
   81c0c:	00081fcd 	.word	0x00081fcd
   81c10:	00081e41 	.word	0x00081e41

00081c14 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   81c14:	4b3d      	ldr	r3, [pc, #244]	; (81d0c <SystemCoreClockUpdate+0xf8>)
   81c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81c18:	f003 0303 	and.w	r3, r3, #3
   81c1c:	2b03      	cmp	r3, #3
   81c1e:	d80e      	bhi.n	81c3e <SystemCoreClockUpdate+0x2a>
   81c20:	e8df f003 	tbb	[pc, r3]
   81c24:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   81c28:	4b39      	ldr	r3, [pc, #228]	; (81d10 <SystemCoreClockUpdate+0xfc>)
   81c2a:	695b      	ldr	r3, [r3, #20]
   81c2c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   81c30:	bf14      	ite	ne
   81c32:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   81c36:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   81c3a:	4b36      	ldr	r3, [pc, #216]	; (81d14 <SystemCoreClockUpdate+0x100>)
   81c3c:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   81c3e:	4b33      	ldr	r3, [pc, #204]	; (81d0c <SystemCoreClockUpdate+0xf8>)
   81c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81c42:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81c46:	2b70      	cmp	r3, #112	; 0x70
   81c48:	d057      	beq.n	81cfa <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   81c4a:	4b30      	ldr	r3, [pc, #192]	; (81d0c <SystemCoreClockUpdate+0xf8>)
   81c4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   81c4e:	4931      	ldr	r1, [pc, #196]	; (81d14 <SystemCoreClockUpdate+0x100>)
   81c50:	f3c2 1202 	ubfx	r2, r2, #4, #3
   81c54:	680b      	ldr	r3, [r1, #0]
   81c56:	40d3      	lsrs	r3, r2
   81c58:	600b      	str	r3, [r1, #0]
   81c5a:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81c5c:	4b2b      	ldr	r3, [pc, #172]	; (81d0c <SystemCoreClockUpdate+0xf8>)
   81c5e:	6a1b      	ldr	r3, [r3, #32]
   81c60:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81c64:	d003      	beq.n	81c6e <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81c66:	4a2c      	ldr	r2, [pc, #176]	; (81d18 <SystemCoreClockUpdate+0x104>)
   81c68:	4b2a      	ldr	r3, [pc, #168]	; (81d14 <SystemCoreClockUpdate+0x100>)
   81c6a:	601a      	str	r2, [r3, #0]
   81c6c:	e7e7      	b.n	81c3e <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81c6e:	4a2b      	ldr	r2, [pc, #172]	; (81d1c <SystemCoreClockUpdate+0x108>)
   81c70:	4b28      	ldr	r3, [pc, #160]	; (81d14 <SystemCoreClockUpdate+0x100>)
   81c72:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81c74:	4b25      	ldr	r3, [pc, #148]	; (81d0c <SystemCoreClockUpdate+0xf8>)
   81c76:	6a1b      	ldr	r3, [r3, #32]
   81c78:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81c7c:	2b10      	cmp	r3, #16
   81c7e:	d005      	beq.n	81c8c <SystemCoreClockUpdate+0x78>
   81c80:	2b20      	cmp	r3, #32
   81c82:	d1dc      	bne.n	81c3e <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   81c84:	4a24      	ldr	r2, [pc, #144]	; (81d18 <SystemCoreClockUpdate+0x104>)
   81c86:	4b23      	ldr	r3, [pc, #140]	; (81d14 <SystemCoreClockUpdate+0x100>)
   81c88:	601a      	str	r2, [r3, #0]
				break;
   81c8a:	e7d8      	b.n	81c3e <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   81c8c:	4a24      	ldr	r2, [pc, #144]	; (81d20 <SystemCoreClockUpdate+0x10c>)
   81c8e:	4b21      	ldr	r3, [pc, #132]	; (81d14 <SystemCoreClockUpdate+0x100>)
   81c90:	601a      	str	r2, [r3, #0]
				break;
   81c92:	e7d4      	b.n	81c3e <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81c94:	4b1d      	ldr	r3, [pc, #116]	; (81d0c <SystemCoreClockUpdate+0xf8>)
   81c96:	6a1b      	ldr	r3, [r3, #32]
   81c98:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81c9c:	d00c      	beq.n	81cb8 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81c9e:	4a1e      	ldr	r2, [pc, #120]	; (81d18 <SystemCoreClockUpdate+0x104>)
   81ca0:	4b1c      	ldr	r3, [pc, #112]	; (81d14 <SystemCoreClockUpdate+0x100>)
   81ca2:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   81ca4:	4b19      	ldr	r3, [pc, #100]	; (81d0c <SystemCoreClockUpdate+0xf8>)
   81ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81ca8:	f003 0303 	and.w	r3, r3, #3
   81cac:	2b02      	cmp	r3, #2
   81cae:	d016      	beq.n	81cde <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   81cb0:	4a1c      	ldr	r2, [pc, #112]	; (81d24 <SystemCoreClockUpdate+0x110>)
   81cb2:	4b18      	ldr	r3, [pc, #96]	; (81d14 <SystemCoreClockUpdate+0x100>)
   81cb4:	601a      	str	r2, [r3, #0]
   81cb6:	e7c2      	b.n	81c3e <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81cb8:	4a18      	ldr	r2, [pc, #96]	; (81d1c <SystemCoreClockUpdate+0x108>)
   81cba:	4b16      	ldr	r3, [pc, #88]	; (81d14 <SystemCoreClockUpdate+0x100>)
   81cbc:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81cbe:	4b13      	ldr	r3, [pc, #76]	; (81d0c <SystemCoreClockUpdate+0xf8>)
   81cc0:	6a1b      	ldr	r3, [r3, #32]
   81cc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81cc6:	2b10      	cmp	r3, #16
   81cc8:	d005      	beq.n	81cd6 <SystemCoreClockUpdate+0xc2>
   81cca:	2b20      	cmp	r3, #32
   81ccc:	d1ea      	bne.n	81ca4 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   81cce:	4a12      	ldr	r2, [pc, #72]	; (81d18 <SystemCoreClockUpdate+0x104>)
   81cd0:	4b10      	ldr	r3, [pc, #64]	; (81d14 <SystemCoreClockUpdate+0x100>)
   81cd2:	601a      	str	r2, [r3, #0]
				break;
   81cd4:	e7e6      	b.n	81ca4 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   81cd6:	4a12      	ldr	r2, [pc, #72]	; (81d20 <SystemCoreClockUpdate+0x10c>)
   81cd8:	4b0e      	ldr	r3, [pc, #56]	; (81d14 <SystemCoreClockUpdate+0x100>)
   81cda:	601a      	str	r2, [r3, #0]
				break;
   81cdc:	e7e2      	b.n	81ca4 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81cde:	4a0b      	ldr	r2, [pc, #44]	; (81d0c <SystemCoreClockUpdate+0xf8>)
   81ce0:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81ce2:	6a92      	ldr	r2, [r2, #40]	; 0x28
   81ce4:	480b      	ldr	r0, [pc, #44]	; (81d14 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81ce6:	f3c1 410a 	ubfx	r1, r1, #16, #11
   81cea:	6803      	ldr	r3, [r0, #0]
   81cec:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81cf0:	b2d2      	uxtb	r2, r2
   81cf2:	fbb3 f3f2 	udiv	r3, r3, r2
   81cf6:	6003      	str	r3, [r0, #0]
   81cf8:	e7a1      	b.n	81c3e <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   81cfa:	4a06      	ldr	r2, [pc, #24]	; (81d14 <SystemCoreClockUpdate+0x100>)
   81cfc:	6813      	ldr	r3, [r2, #0]
   81cfe:	490a      	ldr	r1, [pc, #40]	; (81d28 <SystemCoreClockUpdate+0x114>)
   81d00:	fba1 1303 	umull	r1, r3, r1, r3
   81d04:	085b      	lsrs	r3, r3, #1
   81d06:	6013      	str	r3, [r2, #0]
   81d08:	4770      	bx	lr
   81d0a:	bf00      	nop
   81d0c:	400e0600 	.word	0x400e0600
   81d10:	400e1a10 	.word	0x400e1a10
   81d14:	20070144 	.word	0x20070144
   81d18:	00b71b00 	.word	0x00b71b00
   81d1c:	003d0900 	.word	0x003d0900
   81d20:	007a1200 	.word	0x007a1200
   81d24:	0e4e1c00 	.word	0x0e4e1c00
   81d28:	aaaaaaab 	.word	0xaaaaaaab

00081d2c <my_led_task_3>:
			xSemaphoreGive(semaphore_3);
		}
	}
}

static void my_led_task_3(void *pvParameters){
   81d2c:	b580      	push	{r7, lr}
	while(1){
		if (xSemaphoreTake(semaphore_3, 100)){
   81d2e:	4e0f      	ldr	r6, [pc, #60]	; (81d6c <my_led_task_3+0x40>)
   81d30:	2400      	movs	r4, #0
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   81d32:	4f0f      	ldr	r7, [pc, #60]	; (81d70 <my_led_task_3+0x44>)
   81d34:	4d0f      	ldr	r5, [pc, #60]	; (81d74 <my_led_task_3+0x48>)
   81d36:	4623      	mov	r3, r4
   81d38:	2264      	movs	r2, #100	; 0x64
   81d3a:	4621      	mov	r1, r4
   81d3c:	6830      	ldr	r0, [r6, #0]
   81d3e:	47a8      	blx	r5
   81d40:	2800      	cmp	r0, #0
   81d42:	d0f8      	beq.n	81d36 <my_led_task_3+0xa>
   81d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   81d46:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
		port->PIO_CODR = mask;
   81d4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   81d4e:	bf14      	ite	ne
   81d50:	637b      	strne	r3, [r7, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
   81d52:	633b      	streq	r3, [r7, #48]	; 0x30
			ioport_toggle_pin_level(MY_LED_3);
			delay_ms(100);
   81d54:	4808      	ldr	r0, [pc, #32]	; (81d78 <my_led_task_3+0x4c>)
   81d56:	4b09      	ldr	r3, [pc, #36]	; (81d7c <my_led_task_3+0x50>)
   81d58:	4798      	blx	r3
			xSemaphoreGive(semaphore_1);
   81d5a:	4623      	mov	r3, r4
   81d5c:	4622      	mov	r2, r4
   81d5e:	4621      	mov	r1, r4
   81d60:	4807      	ldr	r0, [pc, #28]	; (81d80 <my_led_task_3+0x54>)
   81d62:	6800      	ldr	r0, [r0, #0]
   81d64:	4d07      	ldr	r5, [pc, #28]	; (81d84 <my_led_task_3+0x58>)
   81d66:	47a8      	blx	r5
   81d68:	e7e4      	b.n	81d34 <my_led_task_3+0x8>
   81d6a:	bf00      	nop
   81d6c:	2007a7a0 	.word	0x2007a7a0
   81d70:	400e1200 	.word	0x400e1200
   81d74:	0008086d 	.word	0x0008086d
   81d78:	000927c0 	.word	0x000927c0
   81d7c:	20070001 	.word	0x20070001
   81d80:	2007a78c 	.word	0x2007a78c
   81d84:	000806b5 	.word	0x000806b5

00081d88 <my_led_task_2>:
static void my_led_task_2(void *pvParameters){
   81d88:	b580      	push	{r7, lr}
		if (xSemaphoreTake(semaphore_2, 100)){
   81d8a:	4e0f      	ldr	r6, [pc, #60]	; (81dc8 <my_led_task_2+0x40>)
   81d8c:	2400      	movs	r4, #0
   81d8e:	4d0f      	ldr	r5, [pc, #60]	; (81dcc <my_led_task_2+0x44>)
   81d90:	4623      	mov	r3, r4
   81d92:	2264      	movs	r2, #100	; 0x64
   81d94:	4621      	mov	r1, r4
   81d96:	6830      	ldr	r0, [r6, #0]
   81d98:	47a8      	blx	r5
   81d9a:	2800      	cmp	r0, #0
   81d9c:	d0f8      	beq.n	81d90 <my_led_task_2+0x8>
	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   81d9e:	4b0c      	ldr	r3, [pc, #48]	; (81dd0 <my_led_task_2+0x48>)
   81da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81da2:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
		port->PIO_CODR = mask;
   81da6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   81daa:	4b09      	ldr	r3, [pc, #36]	; (81dd0 <my_led_task_2+0x48>)
   81dac:	bf14      	ite	ne
   81dae:	635a      	strne	r2, [r3, #52]	; 0x34
		port->PIO_SODR = mask;
   81db0:	631a      	streq	r2, [r3, #48]	; 0x30
			delay_ms(100);
   81db2:	4808      	ldr	r0, [pc, #32]	; (81dd4 <my_led_task_2+0x4c>)
   81db4:	4b08      	ldr	r3, [pc, #32]	; (81dd8 <my_led_task_2+0x50>)
   81db6:	4798      	blx	r3
			xSemaphoreGive(semaphore_3);
   81db8:	4623      	mov	r3, r4
   81dba:	4622      	mov	r2, r4
   81dbc:	4621      	mov	r1, r4
   81dbe:	4807      	ldr	r0, [pc, #28]	; (81ddc <my_led_task_2+0x54>)
   81dc0:	6800      	ldr	r0, [r0, #0]
   81dc2:	4f07      	ldr	r7, [pc, #28]	; (81de0 <my_led_task_2+0x58>)
   81dc4:	47b8      	blx	r7
   81dc6:	e7e3      	b.n	81d90 <my_led_task_2+0x8>
   81dc8:	2007a794 	.word	0x2007a794
   81dcc:	0008086d 	.word	0x0008086d
   81dd0:	400e1000 	.word	0x400e1000
   81dd4:	000927c0 	.word	0x000927c0
   81dd8:	20070001 	.word	0x20070001
   81ddc:	2007a7a0 	.word	0x2007a7a0
   81de0:	000806b5 	.word	0x000806b5

00081de4 <my_led_task_1>:
static void my_led_task_1(void *pvParameters){
   81de4:	b580      	push	{r7, lr}
		if (xSemaphoreTake(semaphore_1, 100)){
   81de6:	4e0f      	ldr	r6, [pc, #60]	; (81e24 <my_led_task_1+0x40>)
   81de8:	2400      	movs	r4, #0
	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   81dea:	4f0f      	ldr	r7, [pc, #60]	; (81e28 <my_led_task_1+0x44>)
   81dec:	4d0f      	ldr	r5, [pc, #60]	; (81e2c <my_led_task_1+0x48>)
   81dee:	4623      	mov	r3, r4
   81df0:	2264      	movs	r2, #100	; 0x64
   81df2:	4621      	mov	r1, r4
   81df4:	6830      	ldr	r0, [r6, #0]
   81df6:	47a8      	blx	r5
   81df8:	2800      	cmp	r0, #0
   81dfa:	d0f8      	beq.n	81dee <my_led_task_1+0xa>
   81dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   81dfe:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
		port->PIO_CODR = mask;
   81e02:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   81e06:	bf14      	ite	ne
   81e08:	637b      	strne	r3, [r7, #52]	; 0x34
		port->PIO_SODR = mask;
   81e0a:	633b      	streq	r3, [r7, #48]	; 0x30
			delay_ms(100);
   81e0c:	4808      	ldr	r0, [pc, #32]	; (81e30 <my_led_task_1+0x4c>)
   81e0e:	4b09      	ldr	r3, [pc, #36]	; (81e34 <my_led_task_1+0x50>)
   81e10:	4798      	blx	r3
			xSemaphoreGive(semaphore_2);
   81e12:	4623      	mov	r3, r4
   81e14:	4622      	mov	r2, r4
   81e16:	4621      	mov	r1, r4
   81e18:	4807      	ldr	r0, [pc, #28]	; (81e38 <my_led_task_1+0x54>)
   81e1a:	6800      	ldr	r0, [r0, #0]
   81e1c:	4d07      	ldr	r5, [pc, #28]	; (81e3c <my_led_task_1+0x58>)
   81e1e:	47a8      	blx	r5
   81e20:	e7e4      	b.n	81dec <my_led_task_1+0x8>
   81e22:	bf00      	nop
   81e24:	2007a78c 	.word	0x2007a78c
   81e28:	400e1200 	.word	0x400e1200
   81e2c:	0008086d 	.word	0x0008086d
   81e30:	000927c0 	.word	0x000927c0
   81e34:	20070001 	.word	0x20070001
   81e38:	2007a794 	.word	0x2007a794
   81e3c:	000806b5 	.word	0x000806b5

00081e40 <main>:
	}
}
*/

int main (void)
{
   81e40:	b570      	push	{r4, r5, r6, lr}
   81e42:	b084      	sub	sp, #16
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
   81e44:	4b48      	ldr	r3, [pc, #288]	; (81f68 <main+0x128>)
   81e46:	4798      	blx	r3
	board_init();
   81e48:	4b48      	ldr	r3, [pc, #288]	; (81f6c <main+0x12c>)
   81e4a:	4798      	blx	r3
   81e4c:	200b      	movs	r0, #11
   81e4e:	4c48      	ldr	r4, [pc, #288]	; (81f70 <main+0x130>)
   81e50:	47a0      	blx	r4
   81e52:	200c      	movs	r0, #12
   81e54:	47a0      	blx	r4
   81e56:	200d      	movs	r0, #13
   81e58:	47a0      	blx	r4
   81e5a:	200e      	movs	r0, #14
   81e5c:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   81e5e:	4b45      	ldr	r3, [pc, #276]	; (81f74 <main+0x134>)
   81e60:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   81e64:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81e66:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   81e6a:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
   81e6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   81e72:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81e74:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		ioport_toggle_pin_level(MY_LED);
		delay_ms(100);		
	}*/

	/* Insert application code here, after the board has been initialized. */
	xTaskCreate(my_led_task_1, "LED 1", configMINIMAL_STACK_SIZE+1000 , NULL, 2, &worker1_id);
   81e78:	2400      	movs	r4, #0
   81e7a:	9403      	str	r4, [sp, #12]
   81e7c:	9402      	str	r4, [sp, #8]
   81e7e:	4b3e      	ldr	r3, [pc, #248]	; (81f78 <main+0x138>)
   81e80:	9301      	str	r3, [sp, #4]
   81e82:	2602      	movs	r6, #2
   81e84:	9600      	str	r6, [sp, #0]
   81e86:	4623      	mov	r3, r4
   81e88:	f240 426a 	movw	r2, #1130	; 0x46a
   81e8c:	493b      	ldr	r1, [pc, #236]	; (81f7c <main+0x13c>)
   81e8e:	483c      	ldr	r0, [pc, #240]	; (81f80 <main+0x140>)
   81e90:	4d3c      	ldr	r5, [pc, #240]	; (81f84 <main+0x144>)
   81e92:	47a8      	blx	r5
	xTaskCreate(my_led_task_2, "LED 2", configMINIMAL_STACK_SIZE+1000 , NULL, 2, &worker2_id);
   81e94:	9403      	str	r4, [sp, #12]
   81e96:	9402      	str	r4, [sp, #8]
   81e98:	4b3b      	ldr	r3, [pc, #236]	; (81f88 <main+0x148>)
   81e9a:	9301      	str	r3, [sp, #4]
   81e9c:	9600      	str	r6, [sp, #0]
   81e9e:	4623      	mov	r3, r4
   81ea0:	f240 426a 	movw	r2, #1130	; 0x46a
   81ea4:	4939      	ldr	r1, [pc, #228]	; (81f8c <main+0x14c>)
   81ea6:	483a      	ldr	r0, [pc, #232]	; (81f90 <main+0x150>)
   81ea8:	47a8      	blx	r5
	xTaskCreate(my_led_task_3, "LED 3", configMINIMAL_STACK_SIZE+1000 , NULL, 2, &worker3_id);
   81eaa:	9403      	str	r4, [sp, #12]
   81eac:	9402      	str	r4, [sp, #8]
   81eae:	4b39      	ldr	r3, [pc, #228]	; (81f94 <main+0x154>)
   81eb0:	9301      	str	r3, [sp, #4]
   81eb2:	9600      	str	r6, [sp, #0]
   81eb4:	4623      	mov	r3, r4
   81eb6:	f240 426a 	movw	r2, #1130	; 0x46a
   81eba:	4937      	ldr	r1, [pc, #220]	; (81f98 <main+0x158>)
   81ebc:	4837      	ldr	r0, [pc, #220]	; (81f9c <main+0x15c>)
   81ebe:	47a8      	blx	r5
	/* Create one Software Timer.*/
	//Timer_id = xTimerCreate("Timer",5000, pdTRUE, 0, TimerCallback);
	/* Start Timer.*/
	//xTimerStart( Timer_id, 0);

	vSemaphoreCreateBinary(semaphore_1);
   81ec0:	2203      	movs	r2, #3
   81ec2:	4621      	mov	r1, r4
   81ec4:	2001      	movs	r0, #1
   81ec6:	4b36      	ldr	r3, [pc, #216]	; (81fa0 <main+0x160>)
   81ec8:	4798      	blx	r3
   81eca:	4b36      	ldr	r3, [pc, #216]	; (81fa4 <main+0x164>)
   81ecc:	6018      	str	r0, [r3, #0]
   81ece:	b120      	cbz	r0, 81eda <main+0x9a>
   81ed0:	4623      	mov	r3, r4
   81ed2:	4622      	mov	r2, r4
   81ed4:	4621      	mov	r1, r4
   81ed6:	4c34      	ldr	r4, [pc, #208]	; (81fa8 <main+0x168>)
   81ed8:	47a0      	blx	r4
	vQueueAddToRegistry(semaphore_1, "Semaphore 1");
   81eda:	4c32      	ldr	r4, [pc, #200]	; (81fa4 <main+0x164>)
   81edc:	4933      	ldr	r1, [pc, #204]	; (81fac <main+0x16c>)
   81ede:	6820      	ldr	r0, [r4, #0]
   81ee0:	4b33      	ldr	r3, [pc, #204]	; (81fb0 <main+0x170>)
   81ee2:	4798      	blx	r3
	xSemaphoreTake(semaphore_1, 0);
   81ee4:	2300      	movs	r3, #0
   81ee6:	461a      	mov	r2, r3
   81ee8:	4619      	mov	r1, r3
   81eea:	6820      	ldr	r0, [r4, #0]
   81eec:	4c31      	ldr	r4, [pc, #196]	; (81fb4 <main+0x174>)
   81eee:	47a0      	blx	r4

	vSemaphoreCreateBinary(semaphore_2);
   81ef0:	2203      	movs	r2, #3
   81ef2:	2100      	movs	r1, #0
   81ef4:	2001      	movs	r0, #1
   81ef6:	4b2a      	ldr	r3, [pc, #168]	; (81fa0 <main+0x160>)
   81ef8:	4798      	blx	r3
   81efa:	4b2f      	ldr	r3, [pc, #188]	; (81fb8 <main+0x178>)
   81efc:	6018      	str	r0, [r3, #0]
   81efe:	b120      	cbz	r0, 81f0a <main+0xca>
   81f00:	2300      	movs	r3, #0
   81f02:	461a      	mov	r2, r3
   81f04:	4619      	mov	r1, r3
   81f06:	4c28      	ldr	r4, [pc, #160]	; (81fa8 <main+0x168>)
   81f08:	47a0      	blx	r4
	vQueueAddToRegistry(semaphore_2, "Semaphore 2");
   81f0a:	4c2b      	ldr	r4, [pc, #172]	; (81fb8 <main+0x178>)
   81f0c:	492b      	ldr	r1, [pc, #172]	; (81fbc <main+0x17c>)
   81f0e:	6820      	ldr	r0, [r4, #0]
   81f10:	4b27      	ldr	r3, [pc, #156]	; (81fb0 <main+0x170>)
   81f12:	4798      	blx	r3
	xSemaphoreTake(semaphore_2, 0);
   81f14:	2300      	movs	r3, #0
   81f16:	461a      	mov	r2, r3
   81f18:	4619      	mov	r1, r3
   81f1a:	6820      	ldr	r0, [r4, #0]
   81f1c:	4c25      	ldr	r4, [pc, #148]	; (81fb4 <main+0x174>)
   81f1e:	47a0      	blx	r4

	vSemaphoreCreateBinary(semaphore_3);
   81f20:	2203      	movs	r2, #3
   81f22:	2100      	movs	r1, #0
   81f24:	2001      	movs	r0, #1
   81f26:	4b1e      	ldr	r3, [pc, #120]	; (81fa0 <main+0x160>)
   81f28:	4798      	blx	r3
   81f2a:	4b25      	ldr	r3, [pc, #148]	; (81fc0 <main+0x180>)
   81f2c:	6018      	str	r0, [r3, #0]
   81f2e:	b120      	cbz	r0, 81f3a <main+0xfa>
   81f30:	2300      	movs	r3, #0
   81f32:	461a      	mov	r2, r3
   81f34:	4619      	mov	r1, r3
   81f36:	4c1c      	ldr	r4, [pc, #112]	; (81fa8 <main+0x168>)
   81f38:	47a0      	blx	r4
	vQueueAddToRegistry(semaphore_3, "Semaphore 3");
   81f3a:	4c21      	ldr	r4, [pc, #132]	; (81fc0 <main+0x180>)
   81f3c:	4921      	ldr	r1, [pc, #132]	; (81fc4 <main+0x184>)
   81f3e:	6820      	ldr	r0, [r4, #0]
   81f40:	4b1b      	ldr	r3, [pc, #108]	; (81fb0 <main+0x170>)
   81f42:	4798      	blx	r3
	xSemaphoreTake(semaphore_3, 0);
   81f44:	2300      	movs	r3, #0
   81f46:	461a      	mov	r2, r3
   81f48:	4619      	mov	r1, r3
   81f4a:	6820      	ldr	r0, [r4, #0]
   81f4c:	4c19      	ldr	r4, [pc, #100]	; (81fb4 <main+0x174>)
   81f4e:	47a0      	blx	r4

	xSemaphoreGive(semaphore_1);
   81f50:	2300      	movs	r3, #0
   81f52:	461a      	mov	r2, r3
   81f54:	4619      	mov	r1, r3
   81f56:	4813      	ldr	r0, [pc, #76]	; (81fa4 <main+0x164>)
   81f58:	6800      	ldr	r0, [r0, #0]
   81f5a:	4c13      	ldr	r4, [pc, #76]	; (81fa8 <main+0x168>)
   81f5c:	47a0      	blx	r4

	/* Create one manager task.*/
	//xTaskCreate(manager_task,"manager",configMINIMAL_STACK_SIZE+1000,NULL,tskIDLE_PRIORITY+3, &manager_id);

	/*Start Scheduler*/
	vTaskStartScheduler();
   81f5e:	4b1a      	ldr	r3, [pc, #104]	; (81fc8 <main+0x188>)
   81f60:	4798      	blx	r3
}
   81f62:	2000      	movs	r0, #0
   81f64:	b004      	add	sp, #16
   81f66:	bd70      	pop	{r4, r5, r6, pc}
   81f68:	000816e1 	.word	0x000816e1
   81f6c:	00081745 	.word	0x00081745
   81f70:	00081b59 	.word	0x00081b59
   81f74:	400e1200 	.word	0x400e1200
   81f78:	2007a79c 	.word	0x2007a79c
   81f7c:	00082338 	.word	0x00082338
   81f80:	00081de5 	.word	0x00081de5
   81f84:	00080aad 	.word	0x00080aad
   81f88:	2007a790 	.word	0x2007a790
   81f8c:	00082340 	.word	0x00082340
   81f90:	00081d89 	.word	0x00081d89
   81f94:	2007a798 	.word	0x2007a798
   81f98:	00082348 	.word	0x00082348
   81f9c:	00081d2d 	.word	0x00081d2d
   81fa0:	00080661 	.word	0x00080661
   81fa4:	2007a78c 	.word	0x2007a78c
   81fa8:	000806b5 	.word	0x000806b5
   81fac:	00082350 	.word	0x00082350
   81fb0:	000809d5 	.word	0x000809d5
   81fb4:	0008086d 	.word	0x0008086d
   81fb8:	2007a794 	.word	0x2007a794
   81fbc:	0008235c 	.word	0x0008235c
   81fc0:	2007a7a0 	.word	0x2007a7a0
   81fc4:	00082368 	.word	0x00082368
   81fc8:	00080cb1 	.word	0x00080cb1

00081fcc <__libc_init_array>:
   81fcc:	b570      	push	{r4, r5, r6, lr}
   81fce:	4e0f      	ldr	r6, [pc, #60]	; (8200c <__libc_init_array+0x40>)
   81fd0:	4d0f      	ldr	r5, [pc, #60]	; (82010 <__libc_init_array+0x44>)
   81fd2:	1b76      	subs	r6, r6, r5
   81fd4:	10b6      	asrs	r6, r6, #2
   81fd6:	bf18      	it	ne
   81fd8:	2400      	movne	r4, #0
   81fda:	d005      	beq.n	81fe8 <__libc_init_array+0x1c>
   81fdc:	3401      	adds	r4, #1
   81fde:	f855 3b04 	ldr.w	r3, [r5], #4
   81fe2:	4798      	blx	r3
   81fe4:	42a6      	cmp	r6, r4
   81fe6:	d1f9      	bne.n	81fdc <__libc_init_array+0x10>
   81fe8:	4e0a      	ldr	r6, [pc, #40]	; (82014 <__libc_init_array+0x48>)
   81fea:	4d0b      	ldr	r5, [pc, #44]	; (82018 <__libc_init_array+0x4c>)
   81fec:	f000 f9c4 	bl	82378 <_init>
   81ff0:	1b76      	subs	r6, r6, r5
   81ff2:	10b6      	asrs	r6, r6, #2
   81ff4:	bf18      	it	ne
   81ff6:	2400      	movne	r4, #0
   81ff8:	d006      	beq.n	82008 <__libc_init_array+0x3c>
   81ffa:	3401      	adds	r4, #1
   81ffc:	f855 3b04 	ldr.w	r3, [r5], #4
   82000:	4798      	blx	r3
   82002:	42a6      	cmp	r6, r4
   82004:	d1f9      	bne.n	81ffa <__libc_init_array+0x2e>
   82006:	bd70      	pop	{r4, r5, r6, pc}
   82008:	bd70      	pop	{r4, r5, r6, pc}
   8200a:	bf00      	nop
   8200c:	00082384 	.word	0x00082384
   82010:	00082384 	.word	0x00082384
   82014:	0008238c 	.word	0x0008238c
   82018:	00082384 	.word	0x00082384

0008201c <memcpy>:
   8201c:	4684      	mov	ip, r0
   8201e:	ea41 0300 	orr.w	r3, r1, r0
   82022:	f013 0303 	ands.w	r3, r3, #3
   82026:	d149      	bne.n	820bc <memcpy+0xa0>
   82028:	3a40      	subs	r2, #64	; 0x40
   8202a:	d323      	bcc.n	82074 <memcpy+0x58>
   8202c:	680b      	ldr	r3, [r1, #0]
   8202e:	6003      	str	r3, [r0, #0]
   82030:	684b      	ldr	r3, [r1, #4]
   82032:	6043      	str	r3, [r0, #4]
   82034:	688b      	ldr	r3, [r1, #8]
   82036:	6083      	str	r3, [r0, #8]
   82038:	68cb      	ldr	r3, [r1, #12]
   8203a:	60c3      	str	r3, [r0, #12]
   8203c:	690b      	ldr	r3, [r1, #16]
   8203e:	6103      	str	r3, [r0, #16]
   82040:	694b      	ldr	r3, [r1, #20]
   82042:	6143      	str	r3, [r0, #20]
   82044:	698b      	ldr	r3, [r1, #24]
   82046:	6183      	str	r3, [r0, #24]
   82048:	69cb      	ldr	r3, [r1, #28]
   8204a:	61c3      	str	r3, [r0, #28]
   8204c:	6a0b      	ldr	r3, [r1, #32]
   8204e:	6203      	str	r3, [r0, #32]
   82050:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   82052:	6243      	str	r3, [r0, #36]	; 0x24
   82054:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   82056:	6283      	str	r3, [r0, #40]	; 0x28
   82058:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8205a:	62c3      	str	r3, [r0, #44]	; 0x2c
   8205c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8205e:	6303      	str	r3, [r0, #48]	; 0x30
   82060:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   82062:	6343      	str	r3, [r0, #52]	; 0x34
   82064:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   82066:	6383      	str	r3, [r0, #56]	; 0x38
   82068:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8206a:	63c3      	str	r3, [r0, #60]	; 0x3c
   8206c:	3040      	adds	r0, #64	; 0x40
   8206e:	3140      	adds	r1, #64	; 0x40
   82070:	3a40      	subs	r2, #64	; 0x40
   82072:	d2db      	bcs.n	8202c <memcpy+0x10>
   82074:	3230      	adds	r2, #48	; 0x30
   82076:	d30b      	bcc.n	82090 <memcpy+0x74>
   82078:	680b      	ldr	r3, [r1, #0]
   8207a:	6003      	str	r3, [r0, #0]
   8207c:	684b      	ldr	r3, [r1, #4]
   8207e:	6043      	str	r3, [r0, #4]
   82080:	688b      	ldr	r3, [r1, #8]
   82082:	6083      	str	r3, [r0, #8]
   82084:	68cb      	ldr	r3, [r1, #12]
   82086:	60c3      	str	r3, [r0, #12]
   82088:	3010      	adds	r0, #16
   8208a:	3110      	adds	r1, #16
   8208c:	3a10      	subs	r2, #16
   8208e:	d2f3      	bcs.n	82078 <memcpy+0x5c>
   82090:	320c      	adds	r2, #12
   82092:	d305      	bcc.n	820a0 <memcpy+0x84>
   82094:	f851 3b04 	ldr.w	r3, [r1], #4
   82098:	f840 3b04 	str.w	r3, [r0], #4
   8209c:	3a04      	subs	r2, #4
   8209e:	d2f9      	bcs.n	82094 <memcpy+0x78>
   820a0:	3204      	adds	r2, #4
   820a2:	d008      	beq.n	820b6 <memcpy+0x9a>
   820a4:	07d2      	lsls	r2, r2, #31
   820a6:	bf1c      	itt	ne
   820a8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   820ac:	f800 3b01 	strbne.w	r3, [r0], #1
   820b0:	d301      	bcc.n	820b6 <memcpy+0x9a>
   820b2:	880b      	ldrh	r3, [r1, #0]
   820b4:	8003      	strh	r3, [r0, #0]
   820b6:	4660      	mov	r0, ip
   820b8:	4770      	bx	lr
   820ba:	bf00      	nop
   820bc:	2a08      	cmp	r2, #8
   820be:	d313      	bcc.n	820e8 <memcpy+0xcc>
   820c0:	078b      	lsls	r3, r1, #30
   820c2:	d0b1      	beq.n	82028 <memcpy+0xc>
   820c4:	f010 0303 	ands.w	r3, r0, #3
   820c8:	d0ae      	beq.n	82028 <memcpy+0xc>
   820ca:	f1c3 0304 	rsb	r3, r3, #4
   820ce:	1ad2      	subs	r2, r2, r3
   820d0:	07db      	lsls	r3, r3, #31
   820d2:	bf1c      	itt	ne
   820d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   820d8:	f800 3b01 	strbne.w	r3, [r0], #1
   820dc:	d3a4      	bcc.n	82028 <memcpy+0xc>
   820de:	f831 3b02 	ldrh.w	r3, [r1], #2
   820e2:	f820 3b02 	strh.w	r3, [r0], #2
   820e6:	e79f      	b.n	82028 <memcpy+0xc>
   820e8:	3a04      	subs	r2, #4
   820ea:	d3d9      	bcc.n	820a0 <memcpy+0x84>
   820ec:	3a01      	subs	r2, #1
   820ee:	f811 3b01 	ldrb.w	r3, [r1], #1
   820f2:	f800 3b01 	strb.w	r3, [r0], #1
   820f6:	d2f9      	bcs.n	820ec <memcpy+0xd0>
   820f8:	780b      	ldrb	r3, [r1, #0]
   820fa:	7003      	strb	r3, [r0, #0]
   820fc:	784b      	ldrb	r3, [r1, #1]
   820fe:	7043      	strb	r3, [r0, #1]
   82100:	788b      	ldrb	r3, [r1, #2]
   82102:	7083      	strb	r3, [r0, #2]
   82104:	4660      	mov	r0, ip
   82106:	4770      	bx	lr

00082108 <memset>:
   82108:	b470      	push	{r4, r5, r6}
   8210a:	0786      	lsls	r6, r0, #30
   8210c:	d046      	beq.n	8219c <memset+0x94>
   8210e:	1e54      	subs	r4, r2, #1
   82110:	2a00      	cmp	r2, #0
   82112:	d041      	beq.n	82198 <memset+0x90>
   82114:	b2ca      	uxtb	r2, r1
   82116:	4603      	mov	r3, r0
   82118:	e002      	b.n	82120 <memset+0x18>
   8211a:	f114 34ff 	adds.w	r4, r4, #4294967295
   8211e:	d33b      	bcc.n	82198 <memset+0x90>
   82120:	f803 2b01 	strb.w	r2, [r3], #1
   82124:	079d      	lsls	r5, r3, #30
   82126:	d1f8      	bne.n	8211a <memset+0x12>
   82128:	2c03      	cmp	r4, #3
   8212a:	d92e      	bls.n	8218a <memset+0x82>
   8212c:	b2cd      	uxtb	r5, r1
   8212e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   82132:	2c0f      	cmp	r4, #15
   82134:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   82138:	d919      	bls.n	8216e <memset+0x66>
   8213a:	4626      	mov	r6, r4
   8213c:	f103 0210 	add.w	r2, r3, #16
   82140:	3e10      	subs	r6, #16
   82142:	2e0f      	cmp	r6, #15
   82144:	f842 5c10 	str.w	r5, [r2, #-16]
   82148:	f842 5c0c 	str.w	r5, [r2, #-12]
   8214c:	f842 5c08 	str.w	r5, [r2, #-8]
   82150:	f842 5c04 	str.w	r5, [r2, #-4]
   82154:	f102 0210 	add.w	r2, r2, #16
   82158:	d8f2      	bhi.n	82140 <memset+0x38>
   8215a:	f1a4 0210 	sub.w	r2, r4, #16
   8215e:	f022 020f 	bic.w	r2, r2, #15
   82162:	f004 040f 	and.w	r4, r4, #15
   82166:	3210      	adds	r2, #16
   82168:	2c03      	cmp	r4, #3
   8216a:	4413      	add	r3, r2
   8216c:	d90d      	bls.n	8218a <memset+0x82>
   8216e:	461e      	mov	r6, r3
   82170:	4622      	mov	r2, r4
   82172:	3a04      	subs	r2, #4
   82174:	2a03      	cmp	r2, #3
   82176:	f846 5b04 	str.w	r5, [r6], #4
   8217a:	d8fa      	bhi.n	82172 <memset+0x6a>
   8217c:	1f22      	subs	r2, r4, #4
   8217e:	f022 0203 	bic.w	r2, r2, #3
   82182:	3204      	adds	r2, #4
   82184:	4413      	add	r3, r2
   82186:	f004 0403 	and.w	r4, r4, #3
   8218a:	b12c      	cbz	r4, 82198 <memset+0x90>
   8218c:	b2c9      	uxtb	r1, r1
   8218e:	441c      	add	r4, r3
   82190:	f803 1b01 	strb.w	r1, [r3], #1
   82194:	429c      	cmp	r4, r3
   82196:	d1fb      	bne.n	82190 <memset+0x88>
   82198:	bc70      	pop	{r4, r5, r6}
   8219a:	4770      	bx	lr
   8219c:	4614      	mov	r4, r2
   8219e:	4603      	mov	r3, r0
   821a0:	e7c2      	b.n	82128 <memset+0x20>
   821a2:	bf00      	nop

000821a4 <strncpy>:
   821a4:	ea40 0301 	orr.w	r3, r0, r1
   821a8:	f013 0f03 	tst.w	r3, #3
   821ac:	b470      	push	{r4, r5, r6}
   821ae:	4603      	mov	r3, r0
   821b0:	d024      	beq.n	821fc <strncpy+0x58>
   821b2:	b1a2      	cbz	r2, 821de <strncpy+0x3a>
   821b4:	780c      	ldrb	r4, [r1, #0]
   821b6:	3a01      	subs	r2, #1
   821b8:	701c      	strb	r4, [r3, #0]
   821ba:	3101      	adds	r1, #1
   821bc:	3301      	adds	r3, #1
   821be:	b13c      	cbz	r4, 821d0 <strncpy+0x2c>
   821c0:	b16a      	cbz	r2, 821de <strncpy+0x3a>
   821c2:	f811 4b01 	ldrb.w	r4, [r1], #1
   821c6:	3a01      	subs	r2, #1
   821c8:	f803 4b01 	strb.w	r4, [r3], #1
   821cc:	2c00      	cmp	r4, #0
   821ce:	d1f7      	bne.n	821c0 <strncpy+0x1c>
   821d0:	b12a      	cbz	r2, 821de <strncpy+0x3a>
   821d2:	2100      	movs	r1, #0
   821d4:	441a      	add	r2, r3
   821d6:	f803 1b01 	strb.w	r1, [r3], #1
   821da:	429a      	cmp	r2, r3
   821dc:	d1fb      	bne.n	821d6 <strncpy+0x32>
   821de:	bc70      	pop	{r4, r5, r6}
   821e0:	4770      	bx	lr
   821e2:	460e      	mov	r6, r1
   821e4:	f851 5b04 	ldr.w	r5, [r1], #4
   821e8:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   821ec:	ea24 0405 	bic.w	r4, r4, r5
   821f0:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   821f4:	d105      	bne.n	82202 <strncpy+0x5e>
   821f6:	3a04      	subs	r2, #4
   821f8:	f843 5b04 	str.w	r5, [r3], #4
   821fc:	2a03      	cmp	r2, #3
   821fe:	d8f0      	bhi.n	821e2 <strncpy+0x3e>
   82200:	e7d7      	b.n	821b2 <strncpy+0xe>
   82202:	4631      	mov	r1, r6
   82204:	e7d6      	b.n	821b4 <strncpy+0x10>
   82206:	bf00      	nop

00082208 <register_fini>:
   82208:	4b02      	ldr	r3, [pc, #8]	; (82214 <register_fini+0xc>)
   8220a:	b113      	cbz	r3, 82212 <register_fini+0xa>
   8220c:	4802      	ldr	r0, [pc, #8]	; (82218 <register_fini+0x10>)
   8220e:	f000 b805 	b.w	8221c <atexit>
   82212:	4770      	bx	lr
   82214:	00000000 	.word	0x00000000
   82218:	00082229 	.word	0x00082229

0008221c <atexit>:
   8221c:	2300      	movs	r3, #0
   8221e:	4601      	mov	r1, r0
   82220:	461a      	mov	r2, r3
   82222:	4618      	mov	r0, r3
   82224:	f000 b81e 	b.w	82264 <__register_exitproc>

00082228 <__libc_fini_array>:
   82228:	b538      	push	{r3, r4, r5, lr}
   8222a:	4c0a      	ldr	r4, [pc, #40]	; (82254 <__libc_fini_array+0x2c>)
   8222c:	4d0a      	ldr	r5, [pc, #40]	; (82258 <__libc_fini_array+0x30>)
   8222e:	1b64      	subs	r4, r4, r5
   82230:	10a4      	asrs	r4, r4, #2
   82232:	d00a      	beq.n	8224a <__libc_fini_array+0x22>
   82234:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   82238:	3b01      	subs	r3, #1
   8223a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   8223e:	3c01      	subs	r4, #1
   82240:	f855 3904 	ldr.w	r3, [r5], #-4
   82244:	4798      	blx	r3
   82246:	2c00      	cmp	r4, #0
   82248:	d1f9      	bne.n	8223e <__libc_fini_array+0x16>
   8224a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8224e:	f000 b89d 	b.w	8238c <_fini>
   82252:	bf00      	nop
   82254:	0008239c 	.word	0x0008239c
   82258:	00082398 	.word	0x00082398

0008225c <__retarget_lock_acquire_recursive>:
   8225c:	4770      	bx	lr
   8225e:	bf00      	nop

00082260 <__retarget_lock_release_recursive>:
   82260:	4770      	bx	lr
   82262:	bf00      	nop

00082264 <__register_exitproc>:
   82264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   82268:	4d2c      	ldr	r5, [pc, #176]	; (8231c <__register_exitproc+0xb8>)
   8226a:	4606      	mov	r6, r0
   8226c:	6828      	ldr	r0, [r5, #0]
   8226e:	4698      	mov	r8, r3
   82270:	460f      	mov	r7, r1
   82272:	4691      	mov	r9, r2
   82274:	f7ff fff2 	bl	8225c <__retarget_lock_acquire_recursive>
   82278:	4b29      	ldr	r3, [pc, #164]	; (82320 <__register_exitproc+0xbc>)
   8227a:	681c      	ldr	r4, [r3, #0]
   8227c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   82280:	2b00      	cmp	r3, #0
   82282:	d03e      	beq.n	82302 <__register_exitproc+0x9e>
   82284:	685a      	ldr	r2, [r3, #4]
   82286:	2a1f      	cmp	r2, #31
   82288:	dc1c      	bgt.n	822c4 <__register_exitproc+0x60>
   8228a:	f102 0e01 	add.w	lr, r2, #1
   8228e:	b176      	cbz	r6, 822ae <__register_exitproc+0x4a>
   82290:	2101      	movs	r1, #1
   82292:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   82296:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   8229a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   8229e:	4091      	lsls	r1, r2
   822a0:	4308      	orrs	r0, r1
   822a2:	2e02      	cmp	r6, #2
   822a4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   822a8:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   822ac:	d023      	beq.n	822f6 <__register_exitproc+0x92>
   822ae:	3202      	adds	r2, #2
   822b0:	f8c3 e004 	str.w	lr, [r3, #4]
   822b4:	6828      	ldr	r0, [r5, #0]
   822b6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   822ba:	f7ff ffd1 	bl	82260 <__retarget_lock_release_recursive>
   822be:	2000      	movs	r0, #0
   822c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   822c4:	4b17      	ldr	r3, [pc, #92]	; (82324 <__register_exitproc+0xc0>)
   822c6:	b30b      	cbz	r3, 8230c <__register_exitproc+0xa8>
   822c8:	f44f 70c8 	mov.w	r0, #400	; 0x190
   822cc:	f3af 8000 	nop.w
   822d0:	4603      	mov	r3, r0
   822d2:	b1d8      	cbz	r0, 8230c <__register_exitproc+0xa8>
   822d4:	2000      	movs	r0, #0
   822d6:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   822da:	f04f 0e01 	mov.w	lr, #1
   822de:	6058      	str	r0, [r3, #4]
   822e0:	6019      	str	r1, [r3, #0]
   822e2:	4602      	mov	r2, r0
   822e4:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   822e8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   822ec:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   822f0:	2e00      	cmp	r6, #0
   822f2:	d0dc      	beq.n	822ae <__register_exitproc+0x4a>
   822f4:	e7cc      	b.n	82290 <__register_exitproc+0x2c>
   822f6:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   822fa:	4301      	orrs	r1, r0
   822fc:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   82300:	e7d5      	b.n	822ae <__register_exitproc+0x4a>
   82302:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   82306:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8230a:	e7bb      	b.n	82284 <__register_exitproc+0x20>
   8230c:	6828      	ldr	r0, [r5, #0]
   8230e:	f7ff ffa7 	bl	82260 <__retarget_lock_release_recursive>
   82312:	f04f 30ff 	mov.w	r0, #4294967295
   82316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8231a:	bf00      	nop
   8231c:	20070570 	.word	0x20070570
   82320:	00082374 	.word	0x00082374
   82324:	00000000 	.word	0x00000000
   82328:	454c4449 	.word	0x454c4449
   8232c:	00000000 	.word	0x00000000
   82330:	20726d54 	.word	0x20726d54
   82334:	00637653 	.word	0x00637653
   82338:	2044454c 	.word	0x2044454c
   8233c:	00000031 	.word	0x00000031
   82340:	2044454c 	.word	0x2044454c
   82344:	00000032 	.word	0x00000032
   82348:	2044454c 	.word	0x2044454c
   8234c:	00000033 	.word	0x00000033
   82350:	616d6553 	.word	0x616d6553
   82354:	726f6870 	.word	0x726f6870
   82358:	00312065 	.word	0x00312065
   8235c:	616d6553 	.word	0x616d6553
   82360:	726f6870 	.word	0x726f6870
   82364:	00322065 	.word	0x00322065
   82368:	616d6553 	.word	0x616d6553
   8236c:	726f6870 	.word	0x726f6870
   82370:	00332065 	.word	0x00332065

00082374 <_global_impure_ptr>:
   82374:	20070148                                H.. 

00082378 <_init>:
   82378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8237a:	bf00      	nop
   8237c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8237e:	bc08      	pop	{r3}
   82380:	469e      	mov	lr, r3
   82382:	4770      	bx	lr

00082384 <__init_array_start>:
   82384:	00082209 	.word	0x00082209

00082388 <__frame_dummy_init_array_entry>:
   82388:	00080119                                ....

0008238c <_fini>:
   8238c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8238e:	bf00      	nop
   82390:	bcf8      	pop	{r3, r4, r5, r6, r7}
   82392:	bc08      	pop	{r3}
   82394:	469e      	mov	lr, r3
   82396:	4770      	bx	lr

00082398 <__fini_array_start>:
   82398:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
	...

2007000c <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4a14      	ldr	r2, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b13      	ldr	r3, [r2, #48]	; 0x30
20070048:	f023 0303 	bic.w	r3, r3, #3
2007004c:	f043 0301 	orr.w	r3, r3, #1
20070050:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070054:	f013 0f08 	tst.w	r3, #8
20070058:	d0fb      	beq.n	20070052 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005a:	4a12      	ldr	r2, [pc, #72]	; (200700a4 <SystemInit+0x98>)
2007005c:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
2007005e:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070060:	461a      	mov	r2, r3
20070062:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070064:	f013 0f02 	tst.w	r3, #2
20070068:	d0fb      	beq.n	20070062 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006a:	2211      	movs	r2, #17
2007006c:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
2007006e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070070:	461a      	mov	r2, r3
20070072:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070074:	f013 0f08 	tst.w	r3, #8
20070078:	d0fb      	beq.n	20070072 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007a:	2212      	movs	r2, #18
2007007c:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
2007007e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070080:	461a      	mov	r2, r3
20070082:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070084:	f013 0f08 	tst.w	r3, #8
20070088:	d0fb      	beq.n	20070082 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008a:	4a07      	ldr	r2, [pc, #28]	; (200700a8 <SystemInit+0x9c>)
2007008c:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
2007008e:	601a      	str	r2, [r3, #0]
20070090:	4770      	bx	lr
20070092:	bf00      	nop
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	20070144 	.word	0x20070144

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d915      	bls.n	200700e2 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b6:	4b1b      	ldr	r3, [pc, #108]	; (20070124 <system_init_flash+0x74>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d919      	bls.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700bc:	4b1a      	ldr	r3, [pc, #104]	; (20070128 <system_init_flash+0x78>)
200700be:	4298      	cmp	r0, r3
200700c0:	d91e      	bls.n	20070100 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700c2:	4b1a      	ldr	r3, [pc, #104]	; (2007012c <system_init_flash+0x7c>)
200700c4:	4298      	cmp	r0, r3
200700c6:	d923      	bls.n	20070110 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700c8:	4b19      	ldr	r3, [pc, #100]	; (20070130 <system_init_flash+0x80>)
200700ca:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700cc:	bf94      	ite	ls
200700ce:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700d2:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700d6:	4a17      	ldr	r2, [pc, #92]	; (20070134 <system_init_flash+0x84>)
200700d8:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700da:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700de:	6013      	str	r3, [r2, #0]
200700e0:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700e2:	2300      	movs	r3, #0
200700e4:	4a13      	ldr	r2, [pc, #76]	; (20070134 <system_init_flash+0x84>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700f0:	f44f 7380 	mov.w	r3, #256	; 0x100
200700f4:	4a0f      	ldr	r2, [pc, #60]	; (20070134 <system_init_flash+0x84>)
200700f6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700f8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700fc:	6013      	str	r3, [r2, #0]
200700fe:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20070100:	f44f 7300 	mov.w	r3, #512	; 0x200
20070104:	4a0b      	ldr	r2, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070106:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20070108:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007010c:	6013      	str	r3, [r2, #0]
2007010e:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070110:	f44f 7340 	mov.w	r3, #768	; 0x300
20070114:	4a07      	ldr	r2, [pc, #28]	; (20070134 <system_init_flash+0x84>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	02faf07f 	.word	0x02faf07f
20070128:	03d08fff 	.word	0x03d08fff
2007012c:	04c4b3ff 	.word	0x04c4b3ff
20070130:	055d4a7f 	.word	0x055d4a7f
20070134:	400e0a00 	.word	0x400e0a00

20070138 <uxCriticalNesting>:
20070138:	aaaaaaaa                                ....

2007013c <xFreeBytesRemaining>:
2007013c:	0000a000                                ....

20070140 <xNextTaskUnblockTime>:
20070140:	ffffffff                                ....

20070144 <SystemCoreClock>:
20070144:	003d0900                                ..=.

20070148 <impure_data>:
20070148:	00000000 20070434 2007049c 20070504     ....4.. ... ... 
	...
200701f0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070200:	0005deec 0000000b 00000000 00000000     ................
	...

20070570 <__atexit_recursive_mutex>:
20070570:	2007a7b0                                ... 
